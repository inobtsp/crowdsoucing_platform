"use strict";
/*
 * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelIntrospector = void 0;
/**
 * Introspects on the Skill Managament API (SMAPI) model.
 */
var ModelIntrospector = /** @class */ (function () {
    function ModelIntrospector(modelJson, customizationProcessor) {
        if (!modelJson) {
            var modelContent = require('ask-smapi-model/spec.json');
            this.modelJson = modelContent;
        }
        else {
            this.modelJson = modelJson;
        }
        this.customizationProcessor = customizationProcessor;
        this.processModel();
    }
    /**
     * Returns the operation definition for a given Skill Managament API (SMAPI) operation.
     * @param operationName operation name
     */
    ModelIntrospector.prototype.getOperationDefinition = function (operationName) {
        return this.operations.get(operationName);
    };
    /**
     * Returns a Map of all Skill Managament API (SMAPI) operations
     */
    ModelIntrospector.prototype.getOperations = function () {
        return this.operations;
    };
    ModelIntrospector.prototype.processModel = function () {
        var _this = this;
        var modelDefinitions = this.modelJson.definitions;
        this.definitions = new Map(Object.keys(modelDefinitions).map(function (key) { return [key, modelDefinitions[key]]; }));
        var operationDefinitions = [];
        Object.keys(this.modelJson.paths).forEach(function (pathKey) {
            Object.keys(_this.modelJson.paths[pathKey]).forEach(function (operationKey) {
                operationDefinitions.push(_this.modelJson.paths[pathKey][operationKey]);
            });
        });
        this.operations = new Map();
        for (var _i = 0, operationDefinitions_1 = operationDefinitions; _i < operationDefinitions_1.length; _i++) {
            var operationDefinition = operationDefinitions_1[_i];
            var apiOperationName = operationDefinition['x-operation-name'];
            if (apiOperationName) {
                var apiVersion = parseInt(apiOperationName.substring(apiOperationName.length - 1), 10);
                var apiOperation = {
                    apiOperationName: apiOperationName,
                    apiVersion: apiVersion,
                    description: operationDefinition.description,
                    params: operationDefinition.parameters,
                    customizationMetadata: {},
                };
                var processedOperationName = this.customizationProcessor ? this.customizationProcessor.processOperationName(apiOperationName) : apiOperationName;
                if (this.customizationProcessor) {
                    this.customizationProcessor.processOperation(processedOperationName, apiOperation, this.definitions);
                    for (var _a = 0, _b = apiOperation.params; _a < _b.length; _a++) {
                        var param = _b[_a];
                        this.customizationProcessor.processParameter(param, apiOperation, this.definitions);
                    }
                }
                if (!this.operations.has(processedOperationName) || apiVersion > this.operations.get(processedOperationName).apiVersion) {
                    this.operations.set(processedOperationName, apiOperation);
                }
            }
        }
    };
    return ModelIntrospector;
}());
exports.ModelIntrospector = ModelIntrospector;
//# sourceMappingURL=ModelIntrospector.js.map