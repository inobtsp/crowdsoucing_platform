import * as runtime from 'ask-sdk-model-runtime';
export { runtime };
import ApiConfiguration = runtime.ApiConfiguration;
import ApiResponse = runtime.ApiResponse;
import AuthenticationConfiguration = runtime.AuthenticationConfiguration;
import BaseServiceClient = runtime.BaseServiceClient;
/**
 *
 * @interface
 */
export interface InlineResponse400 {
    'message'?: string;
    'violations'?: Array<v1.Error>;
}
/**
 *
 * @interface
 */
export interface InlineResponse401 {
    'code'?: string;
    'message': string;
}
export declare namespace v0 {
    /**
     *
     * @interface
     */
    interface BadRequestError {
        'message'?: string;
        'violations'?: Array<v0.Error>;
    }
}
export declare namespace v0 {
    /**
     *
     * @interface
     */
    interface Error {
        'code'?: string;
        'message': string;
    }
}
export declare namespace v0 {
    /**
     *
     * @interface
     */
    interface Link {
        'href'?: string;
    }
}
export declare namespace v0 {
    /**
     * Links for the API navigation.
     * @interface
     */
    interface Links {
        'self'?: v0.Link;
        'next'?: v0.Link;
    }
}
export declare namespace v0.catalog {
    /**
     *
     * @interface
     */
    interface CatalogDetails {
        'id'?: string;
        'title'?: string;
        'type'?: v0.catalog.CatalogType;
        'usage'?: v0.catalog.CatalogUsage;
        'lastUpdatedDate'?: string;
        'createdDate'?: string;
        'associatedSkillIds'?: Array<string>;
    }
}
export declare namespace v0.catalog {
    /**
     *
     * @interface
     */
    interface CatalogSummary {
        'id'?: string;
        'title'?: string;
        'type'?: v0.catalog.CatalogType;
        'usage'?: v0.catalog.CatalogUsage;
        'lastUpdatedDate'?: string;
        'createdDate'?: string;
        'associatedSkillIds'?: Array<string>;
    }
}
export declare namespace v0.catalog {
    /**
     * Type of catalog.
     * @enum
     */
    type CatalogType = 'AMAZON.BroadcastChannel' | 'AMAZON.Genre' | 'AMAZON.MusicAlbum' | 'AMAZON.MusicGroup' | 'AMAZON.MusicPlaylist' | 'AMAZON.MusicRecording' | 'AMAZON.TerrestrialRadioChannel' | 'AMAZON.AudioRecording';
}
export declare namespace v0.catalog {
    /**
     * Usage of the catalog.
     * @enum
     */
    type CatalogUsage = 'AlexaMusic.Catalog.BroadcastChannel' | 'AlexaMusic.Catalog.Genre' | 'AlexaMusic.Catalog.MusicAlbum' | 'AlexaMusic.Catalog.MusicGroup' | 'AlexaMusic.Catalog.MusicPlaylist' | 'AlexaMusic.Catalog.MusicRecording' | 'AlexaMusic.Catalog.TerrestrialRadioChannel' | 'AlexaTest.Catalog.AudioRecording';
}
export declare namespace v0.catalog {
    /**
     *
     * @interface
     */
    interface CreateCatalogRequest {
        'title': string;
        'type': v0.catalog.CatalogType;
        'usage': v0.catalog.CatalogUsage;
        'vendorId': string;
    }
}
export declare namespace v0.catalog {
    /**
     * Information about catalogs.
     * @interface
     */
    interface ListCatalogsResponse {
        '_links'?: v0.Links;
        'catalogs'?: Array<v0.catalog.CatalogSummary>;
        'isTruncated'?: boolean;
        'nextToken'?: string;
    }
}
export declare namespace v0.catalog.upload {
    /**
     *
     * @interface
     */
    interface CompleteUploadRequest {
        'partETags'?: Array<v0.catalog.upload.PreSignedUrlItem>;
    }
}
export declare namespace v0.catalog.upload {
    /**
     *
     * @interface
     */
    interface ContentUploadFileSummary {
        'presignedDownloadUrl'?: string;
        'status'?: v0.catalog.upload.FileUploadStatus;
    }
}
export declare namespace v0.catalog.upload {
    /**
     *
     * @interface
     */
    interface ContentUploadSummary {
        'id'?: string;
        'catalogId'?: string;
        'status'?: v0.catalog.upload.UploadStatus;
        'createdDate'?: string;
        'lastUpdatedDate'?: string;
    }
}
export declare namespace v0.catalog.upload {
    /**
     *
     * @interface
     */
    interface CreateContentUploadRequest {
        'numberOfUploadParts'?: number;
    }
}
export declare namespace v0.catalog.upload {
    /**
     * Value of status depends on if file is available for download or not.
     * @enum
     */
    type FileUploadStatus = 'PENDING' | 'AVAILABLE' | 'PURGED' | 'UNAVAILABLE';
}
export declare namespace v0.catalog.upload {
    /**
     *
     * @enum
     */
    type IngestionStatus = 'PENDING' | 'IN_PROGRESS' | 'FAILED' | 'SUCCEEDED' | 'CANCELLED';
}
export declare namespace v0.catalog.upload {
    /**
     *
     * @enum
     */
    type IngestionStepName = 'UPLOAD' | 'SCHEMA_VALIDATION';
}
export declare namespace v0.catalog.upload {
    /**
     *
     * @interface
     */
    interface ListUploadsResponse {
        '_links'?: v0.Links;
        'isTruncated'?: boolean;
        'nextToken'?: string;
        'uploads'?: Array<v0.catalog.upload.ContentUploadSummary>;
    }
}
export declare namespace v0.catalog.upload {
    /**
     *
     * @interface
     */
    interface PreSignedUrlItem {
        'eTag'?: string;
        'partNumber'?: number;
    }
}
export declare namespace v0.catalog.upload {
    /**
     * Single upload part to perform a partitioned (multipart) file upload.
     * @interface
     */
    interface PresignedUploadPart {
        'url'?: string;
        'partNumber'?: number;
    }
}
export declare namespace v0.catalog.upload {
    /**
     * Represents a single step in the ingestion process of a new upload.
     * @interface
     */
    interface UploadIngestionStep {
        'name': v0.catalog.upload.IngestionStepName;
        'status': v0.catalog.upload.IngestionStatus;
        'logUrl'?: string;
        'errors': Array<v0.Error>;
    }
}
export declare namespace v0.catalog.upload {
    /**
     * Status of the entire upload.
     * @enum
     */
    type UploadStatus = 'PENDING' | 'PROCESSING' | 'FAILED' | 'SUCCEEDED';
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     *
     * @interface
     */
    interface CreateSubscriberRequest {
        'name'?: string;
        'vendorId'?: string;
        'endpoint'?: v0.developmentEvents.subscriber.Endpoint;
    }
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     *
     * @interface
     */
    interface Endpoint {
        'uri'?: string;
        'authorization'?: v0.developmentEvents.subscriber.EndpointAuthorization;
    }
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     * Authorization information to be able to publish notification to specified endpoint.
     * @interface
     */
    type EndpointAuthorization = v0.developmentEvents.subscriber.EndpointAwsAuthorization;
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     * Type of authorization (e.g. AWS IAM, OAuth).
     * @enum
     */
    type EndpointAuthorizationType = 'AWS_IAM';
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     *
     * @interface
     */
    interface ListSubscribersResponse {
        '_links'?: v0.Links;
        'nextToken'?: string;
        'subscribers'?: Array<v0.developmentEvents.subscriber.SubscriberSummary>;
    }
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     * Information about the subscriber.
     * @interface
     */
    interface SubscriberInfo {
        'subscriberId'?: string;
        'name'?: string;
        'endpoint'?: v0.developmentEvents.subscriber.Endpoint;
    }
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     * Status of the subscriber. This enum may get extended with new values in future. Clients are expected to gracefully handle any unknown values.
     * @enum
     */
    type SubscriberStatus = 'ACTIVE' | 'INACTIVE';
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     *
     * @interface
     */
    interface SubscriberSummary {
        'subscriberId'?: string;
        'name'?: string;
        'status'?: v0.developmentEvents.subscriber.SubscriberStatus;
        'clientId'?: string;
        'endpoint'?: v0.developmentEvents.subscriber.Endpoint;
    }
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     *
     * @interface
     */
    interface UpdateSubscriberRequest {
        'name'?: string;
        'endpoint'?: v0.developmentEvents.subscriber.Endpoint;
    }
}
export declare namespace v0.developmentEvents.subscription {
    /**
     *
     * @interface
     */
    interface CreateSubscriptionRequest {
        'name': string;
        'events': Array<v0.developmentEvents.subscription.Event>;
        'vendorId': string;
        'subscriberId': string;
    }
}
export declare namespace v0.developmentEvents.subscription {
    /**
     * Represents an event that the subscriber is interested in. The event is of the format AlexaDevelopmentEvent.OPERATION. You can use wildcard event 'AlexaDevelopmentEvent.All' for recieving all developer notifications listed below.   * 'AlexaDevelopmentEvent.ManifestUpdate' - The event representing the status of the update request on the Manifest.   * 'AlexaDevelopmentEvent.SkillPublish' -   The event representing the status of the skill publish process.   * 'AlexaDevelopmentEvent.SkillCertification' -   The event represents if a skill has been certified or not.   * 'AlexaDevelopmentEvent.InteractionModelUpdate' -   The event represents the status of an Interaction Model build for a particular locale.   * 'AlexaDevelopmentEvent.All' - A wildcard event name that allows subscription to all the existing events. While using this, you must not specify any other event name. AlexaDevelopmentEvent.All avoids the need of specifying every development event name in order to receive all events pertaining to a vendor account. Similarly, it avoids the need of updating an existing subscription to be able to receive new events, whenever supproted by notification service. Test Subscriber API cannot use this wildcard. Please make sure that your code can gracefully handle new/previously unknown events, if you are using this wildcard.
     * @enum
     */
    type Event = 'AlexaDevelopmentEvent.ManifestUpdate' | 'AlexaDevelopmentEvent.SkillPublish' | 'AlexaDevelopmentEvent.SkillCertification' | 'AlexaDevelopmentEvent.InteractionModelUpdate' | 'AlexaDevelopmentEvent.All';
}
export declare namespace v0.developmentEvents.subscription {
    /**
     *
     * @interface
     */
    interface ListSubscriptionsResponse {
        '_links'?: v0.Links;
        'nextToken'?: string;
        'subscriptions'?: Array<v0.developmentEvents.subscription.SubscriptionSummary>;
    }
}
export declare namespace v0.developmentEvents.subscription {
    /**
     *
     * @interface
     */
    interface SubscriptionInfo {
        'name'?: string;
        'subscriptionId'?: string;
        'subscriberId'?: string;
        'vendorId'?: string;
        'events'?: Array<v0.developmentEvents.subscription.Event>;
    }
}
export declare namespace v0.developmentEvents.subscription {
    /**
     *
     * @interface
     */
    interface SubscriptionSummary {
        'name'?: string;
        'subscriptionId'?: string;
        'subscriberId'?: string;
        'vendorId'?: string;
        'events'?: Array<v0.developmentEvents.subscription.Event>;
    }
}
export declare namespace v0.developmentEvents.subscription {
    /**
     *
     * @interface
     */
    interface UpdateSubscriptionRequest {
        'name': string;
        'events': Array<v0.developmentEvents.subscription.Event>;
    }
}
export declare namespace v0.eventSchema {
    /**
     * Represents an actor that submitted a request causing development notification event.
     * @interface
     */
    interface ActorAttributes {
        'customerId'?: string;
    }
}
export declare namespace v0.eventSchema {
    /**
     * Represents attributes common to all development notifications.
     * @interface
     */
    type BaseSchema = v0.eventSchema.AlexaDevelopmentEvent.InteractionModelUpdate | v0.eventSchema.AlexaDevelopmentEvent.SkillPublish | v0.eventSchema.AlexaDevelopmentEvent.ManifestUpdate | v0.eventSchema.AlexaDevelopmentEvent.SkillCertification;
}
export declare namespace v0.eventSchema {
    /**
     * Interaction model event specific attributes.
     * @interface
     */
    interface InteractionModelEventAttributes {
        'status'?: v0.eventSchema.RequestStatus;
        'actor'?: v0.eventSchema.ActorAttributes;
        'interactionModel'?: v0.eventSchema.InteractionModelAttributes;
        'subscription'?: v0.eventSchema.SubscriptionAttributes;
    }
}
export declare namespace v0.eventSchema {
    /**
     * Represents the completion status of the request.
     * @enum
     */
    type RequestStatus = 'SUCCEEDED' | 'FAILED';
}
export declare namespace v0.eventSchema {
    /**
     * Represents a set of attributes specific to an Alexa Skill.
     * @interface
     */
    interface SkillAttributes {
        'skillId'?: string;
        'vendorId'?: string;
    }
}
export declare namespace v0.eventSchema {
    /**
     * Skill event specific attributes.
     * @interface
     */
    interface SkillEventAttributes {
        'status'?: v0.eventSchema.RequestStatus;
        'actor'?: v0.eventSchema.ActorAttributes;
        'skill'?: v0.eventSchema.SkillAttributes;
        'subscription'?: v0.eventSchema.SubscriptionAttributes;
    }
}
export declare namespace v0.eventSchema {
    /**
     * Represents attributes of a subscription for development notification.
     * @interface
     */
    interface SubscriptionAttributes {
        'subscriptionId'?: string;
    }
}
export declare namespace v1 {
    /**
     *
     * @interface
     */
    interface BadRequestError {
        'message'?: string;
        'violations'?: Array<v1.Error>;
    }
}
export declare namespace v1 {
    /**
     *
     * @interface
     */
    interface Error {
        'code'?: string;
        'message': string;
    }
}
export declare namespace v1 {
    /**
     *
     * @interface
     */
    interface Link {
        'href'?: string;
    }
}
export declare namespace v1 {
    /**
     * Links for the API navigation.
     * @interface
     */
    interface Links {
        'self'?: v1.Link;
        'next'?: v1.Link;
    }
}
export declare namespace v1 {
    /**
     *
     * @enum
     */
    type StageType = 'development' | 'live';
}
export declare namespace v1 {
    /**
     *
     * @enum
     */
    type StageV2Type = 'live' | 'certified' | 'development';
}
export declare namespace v1.auditLogs {
    /**
     *
     * @interface
     */
    interface AuditLog {
        'xAmznRequestId'?: string;
        'timestamp'?: string;
        'client'?: v1.auditLogs.Client;
        'operation'?: v1.auditLogs.Operation;
        'resources'?: Array<v1.auditLogs.Resource>;
        'requester'?: v1.auditLogs.Requester;
        'httpResponseCode'?: number;
    }
}
export declare namespace v1.auditLogs {
    /**
     *
     * @interface
     */
    interface AuditLogsRequest {
        'vendorId'?: string;
        'requestFilters'?: v1.auditLogs.RequestFilters;
        'sortDirection'?: v1.auditLogs.SortDirection;
        'sortField'?: v1.auditLogs.SortField;
        'paginationContext'?: v1.auditLogs.RequestPaginationContext;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Response to the Query Audit Logs API. It contains the collection of audit logs for the vendor, nextToken and other metadata related to the search query.
     * @interface
     */
    interface AuditLogsResponse {
        'paginationContext'?: v1.auditLogs.ResponsePaginationContext;
        'auditLogs'?: Array<v1.auditLogs.AuditLog>;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Contains information about the Client that this request was performed by.
     * @interface
     */
    interface Client {
        'id'?: string;
        'name'?: string;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Identifier for the application the developer used to manage their skills and skill-related resources. For OAuth applications, this is the OAuth Client Id.
     * @interface
     */
    interface ClientFilter {
        'id'?: string;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Object containing name and version.
     * @interface
     */
    interface Operation {
        'name'?: string;
        'version'?: string;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Name and version of the operation that the developer performed. For example, 'deleteSkill' and 'v1'. This is the same name used in the SMAPI SDK.
     * @interface
     */
    interface OperationFilter {
        'name'?: string;
        'version'?: string;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Request Filters for filtering audit logs.
     * @interface
     */
    interface RequestFilters {
        'clients'?: Array<v1.auditLogs.ClientFilter>;
        'operations'?: Array<v1.auditLogs.OperationFilter>;
        'resources'?: Array<v1.auditLogs.ResourceFilter>;
        'requesters'?: Array<v1.auditLogs.RequesterFilter>;
        'startTime'?: string;
        'endTime'?: string;
        'httpResponseCodes'?: Array<string>;
    }
}
export declare namespace v1.auditLogs {
    /**
     * This object includes nextToken and maxResults.
     * @interface
     */
    interface RequestPaginationContext {
        'nextToken'?: string;
        'maxResults'?: number;
    }
}
export declare namespace v1.auditLogs {
    /**
     * The user that performed the operation.
     * @interface
     */
    interface Requester {
        'userId'?: string;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Filter for the requester of the operation.
     * @interface
     */
    interface RequesterFilter {
        'userId'?: string;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Resource that the developer operated on. This includes both the type and ID of the resource.
     * @interface
     */
    interface Resource {
        'id'?: string;
        'type'?: string;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Resource that the developer operated on. Both do not need to be provided.
     * @interface
     */
    interface ResourceFilter {
        'id'?: string;
        'type'?: v1.auditLogs.ResourceTypeEnum;
    }
}
export declare namespace v1.auditLogs {
    /**
     *
     * @enum
     */
    type ResourceTypeEnum = 'Skill' | 'SkillCatalog' | 'InSkillProduct' | 'Import' | 'Export';
}
export declare namespace v1.auditLogs {
    /**
     * This object contains the next token used to load the next page of the result.
     * @interface
     */
    interface ResponsePaginationContext {
        'nextToken'?: string;
    }
}
export declare namespace v1.auditLogs {
    /**
     * Sets the sorting direction of the result items. When set to 'ASC' these items are returned in ascending order of sortField value and when set to 'DESC' these items are returned in descending order of sortField value.
     * @enum
     */
    type SortDirection = 'ASC' | 'DESC';
}
export declare namespace v1.auditLogs {
    /**
     * Sets the field on which the sorting would be applied.
     * @enum
     */
    type SortField = 'timestamp' | 'operation' | 'resource.id' | 'resource.type' | 'requester.userId' | 'client.id' | 'httpResponseCode';
}
export declare namespace v1.catalog {
    /**
     *
     * @interface
     */
    interface CreateContentUploadUrlRequest {
        'numberOfUploadParts'?: number;
    }
}
export declare namespace v1.catalog {
    /**
     *
     * @interface
     */
    interface CreateContentUploadUrlResponse {
        'urlId': string;
        'preSignedUploadParts'?: Array<v1.catalog.PresignedUploadPartItems>;
    }
}
export declare namespace v1.catalog {
    /**
     *
     * @interface
     */
    interface PresignedUploadPartItems {
        'url': string;
        'partNumber': number;
        'expiresAt': string;
    }
}
export declare namespace v1.catalog.upload {
    /**
     *
     * @interface
     */
    type CatalogUploadBase = v1.catalog.upload.Location | v1.catalog.upload.PreSignedUrl;
}
export declare namespace v1.catalog.upload {
    /**
     *
     * @interface
     */
    interface ContentUploadFileSummary {
        'downloadUrl': string;
        'expiresAt': string;
        'status': v1.catalog.upload.FileUploadStatus;
    }
}
export declare namespace v1.catalog.upload {
    /**
     * Value of status depends on if file is available for download or not.
     * @enum
     */
    type FileUploadStatus = 'PENDING' | 'AVAILABLE' | 'PURGED' | 'UNAVAILABLE';
}
export declare namespace v1.catalog.upload {
    /**
     *
     * @interface
     */
    interface GetContentUploadResponse {
        'id': string;
        'catalogId': string;
        'status': v1.catalog.upload.UploadStatus;
        'createdDate': string;
        'lastUpdatedDate': string;
        'file': v1.catalog.upload.ContentUploadFileSummary;
        'ingestionSteps': Array<v1.catalog.upload.UploadIngestionStep>;
    }
}
export declare namespace v1.catalog.upload {
    /**
     *
     * @enum
     */
    type IngestionStatus = 'PENDING' | 'IN_PROGRESS' | 'FAILED' | 'SUCCEEDED' | 'CANCELLED';
}
export declare namespace v1.catalog.upload {
    /**
     *
     * @enum
     */
    type IngestionStepName = 'UPLOAD' | 'SCHEMA_VALIDATION';
}
export declare namespace v1.catalog.upload {
    /**
     *
     * @interface
     */
    interface PreSignedUrlItem {
        'eTag'?: string;
        'partNumber'?: number;
    }
}
export declare namespace v1.catalog.upload {
    /**
     * Represents a single step in the multi-step ingestion process of a new upload.
     * @interface
     */
    interface UploadIngestionStep {
        'name': v1.catalog.upload.IngestionStepName;
        'status': v1.catalog.upload.IngestionStatus;
        'logUrl'?: string;
        'violations': Array<v1.Error>;
    }
}
export declare namespace v1.catalog.upload {
    /**
     * Status of the entire upload.
     * @enum
     */
    type UploadStatus = 'PENDING' | 'IN_PROGRESS' | 'FAILED' | 'SUCCEEDED';
}
export declare namespace v1.isp {
    /**
     * In-skill product skill association details.
     * @interface
     */
    interface AssociatedSkillResponse {
        'associatedSkillIds'?: Array<string>;
        '_links'?: v1.Links;
        'isTruncated'?: boolean;
        'nextToken'?: string;
    }
}
export declare namespace v1.isp {
    /**
     * Currency to use for in-skill product.
     * @enum
     */
    type Currency = 'USD' | 'GBP' | 'EUR' | 'JPY';
}
export declare namespace v1.isp {
    /**
     * Custom prompts used for in-skill product purchasing options. Supports Speech Synthesis Markup Language (SSML), which can be used to control pronunciation, intonation, timing, and emotion.
     * @interface
     */
    interface CustomProductPrompts {
        'purchasePromptDescription'?: string;
        'boughtConfirmationPrompt'?: string;
    }
}
export declare namespace v1.isp {
    /**
     *
     * @enum
     */
    type DistributionCountries = 'AF' | 'AX' | 'AL' | 'DZ' | 'AS' | 'AD' | 'AO' | 'AI' | 'AQ' | 'AG' | 'AR' | 'AM' | 'AW' | 'AU' | 'AT' | 'AZ' | 'BS' | 'BH' | 'BD' | 'BB' | 'BY' | 'BE' | 'BZ' | 'BJ' | 'BM' | 'BT' | 'BO' | 'BA' | 'BW' | 'BV' | 'BR' | 'IO' | 'BN' | 'BG' | 'BF' | 'BI' | 'KH' | 'CM' | 'CA' | 'CV' | 'KY' | 'CF' | 'TD' | 'CL' | 'CN' | 'CX' | 'CC' | 'CO' | 'KM' | 'CG' | 'CD' | 'CK' | 'CR' | 'HR' | 'CY' | 'CZ' | 'DK' | 'DJ' | 'DM' | 'DO' | 'EC' | 'EG' | 'SV' | 'GQ' | 'ER' | 'EE' | 'ET' | 'FK' | 'FO' | 'FJ' | 'FI' | 'FR' | 'GF' | 'PF' | 'TF' | 'GA' | 'GM' | 'GE' | 'DE' | 'GH' | 'GI' | 'GR' | 'GL' | 'GD' | 'GP' | 'GU' | 'GT' | 'GG' | 'GN' | 'GW' | 'GY' | 'HT' | 'HM' | 'VA' | 'HN' | 'HK' | 'HU' | 'IS' | 'IN' | 'ID' | 'IQ' | 'IE' | 'IM' | 'IL' | 'IT' | 'CI' | 'JM' | 'JP' | 'JE' | 'JO' | 'KZ' | 'KE' | 'KI' | 'KR' | 'KW' | 'KG' | 'LA' | 'LV' | 'LB' | 'LS' | 'LR' | 'LY' | 'LI' | 'LT' | 'LU' | 'MO' | 'MK' | 'MG' | 'MW' | 'MY' | 'MV' | 'ML' | 'MT' | 'MH' | 'MQ' | 'MR' | 'MU' | 'YT' | 'MX' | 'FM' | 'MD' | 'MC' | 'MN' | 'ME' | 'MS' | 'MA' | 'MZ' | 'MM' | 'NA' | 'NR' | 'NP' | 'NL' | 'AN' | 'NC' | 'NZ' | 'NI' | 'NE' | 'NG' | 'NU' | 'NF' | 'MP' | 'NO' | 'OM' | 'PK' | 'PW' | 'PS' | 'PA' | 'PG' | 'PY' | 'PE' | 'PH' | 'PN' | 'PL' | 'PT' | 'PR' | 'QA' | 'RE' | 'RO' | 'RU' | 'RW' | 'BL' | 'SH' | 'KN' | 'LC' | 'MF' | 'PM' | 'VC' | 'WS' | 'SM' | 'ST' | 'SA' | 'SN' | 'RS' | 'SC' | 'SL' | 'SG' | 'SK' | 'SI' | 'SB' | 'SO' | 'ZA' | 'GS' | 'ES' | 'LK' | 'SR' | 'SJ' | 'SZ' | 'SE' | 'CH' | 'TW' | 'TJ' | 'TZ' | 'TH' | 'TL' | 'TG' | 'TK' | 'TO' | 'TT' | 'TN' | 'TR' | 'TM' | 'TC' | 'TV' | 'UG' | 'UA' | 'AE' | 'GB' | 'US' | 'UM' | 'UY' | 'UZ' | 'VU' | 'VE' | 'VN' | 'VG' | 'VI' | 'WF' | 'EH' | 'YE' | 'ZM' | 'ZW';
}
export declare namespace v1.isp {
    /**
     * Whether or not the in-skill product is editable.
     * @enum
     */
    type EditableState = 'EDITABLE' | 'NOT_EDITABLE';
}
export declare namespace v1.isp {
    /**
     * Defines the structure for an in-skill product.
     * @interface
     */
    interface InSkillProductDefinition {
        'version'?: string;
        'type'?: v1.isp.ProductType;
        'referenceName'?: string;
        'purchasableState'?: v1.isp.PurchasableState;
        'subscriptionInformation'?: v1.isp.SubscriptionInformation;
        'publishingInformation'?: v1.isp.PublishingInformation;
        'privacyAndCompliance'?: v1.isp.PrivacyAndCompliance;
        'testingInstructions'?: string;
    }
}
export declare namespace v1.isp {
    /**
     * Defines In-skill product response.
     * @interface
     */
    interface InSkillProductDefinitionResponse {
        'inSkillProductDefinition'?: v1.isp.InSkillProductDefinition;
    }
}
export declare namespace v1.isp {
    /**
     * Information about the in-skill product that is not editable.
     * @interface
     */
    interface InSkillProductSummary {
        'type'?: v1.isp.ProductType;
        'productId'?: string;
        'referenceName'?: string;
        'lastUpdated'?: string;
        'nameByLocale'?: {
            [key: string]: string;
        };
        'status'?: v1.isp.Status;
        'stage'?: v1.isp.Stage;
        'editableState'?: v1.isp.EditableState;
        'purchasableState'?: v1.isp.PurchasableState;
        '_links'?: v1.isp.IspSummaryLinks;
        'pricing'?: {
            [key: string]: v1.isp.SummaryMarketplacePricing;
        };
    }
}
export declare namespace v1.isp {
    /**
     * In-skill product summary response.
     * @interface
     */
    interface InSkillProductSummaryResponse {
        'inSkillProductSummary'?: v1.isp.InSkillProductSummary;
    }
}
export declare namespace v1.isp {
    /**
     *
     * @interface
     */
    interface IspSummaryLinks {
        'self'?: v1.Link;
    }
}
export declare namespace v1.isp {
    /**
     * List of in-skill products.
     * @interface
     */
    interface ListInSkillProduct {
        '_links'?: v1.Links;
        'inSkillProducts'?: Array<v1.isp.InSkillProductSummary>;
        'isTruncated'?: boolean;
        'nextToken'?: string;
    }
}
export declare namespace v1.isp {
    /**
     * List of in-skill product response.
     * @interface
     */
    interface ListInSkillProductResponse {
        'inSkillProductSummaryList'?: v1.isp.ListInSkillProduct;
    }
}
export declare namespace v1.isp {
    /**
     * Defines the structure for localized privacy and compliance.
     * @interface
     */
    interface LocalizedPrivacyAndCompliance {
        'privacyPolicyUrl'?: string;
    }
}
export declare namespace v1.isp {
    /**
     * Defines the structure for locale specific publishing information in the in-skill product definition.
     * @interface
     */
    interface LocalizedPublishingInformation {
        'name'?: string;
        'smallIconUri'?: string;
        'largeIconUri'?: string;
        'summary'?: string;
        'description'?: string;
        'examplePhrases'?: Array<string>;
        'keywords'?: Array<string>;
        'customProductPrompts'?: v1.isp.CustomProductPrompts;
    }
}
export declare namespace v1.isp {
    /**
     * In-skill product pricing information for a marketplace.
     * @interface
     */
    interface MarketplacePricing {
        'releaseDate'?: string;
        'defaultPriceListing'?: v1.isp.PriceListing;
    }
}
export declare namespace v1.isp {
    /**
     * Price listing information for in-skill product.
     * @interface
     */
    interface PriceListing {
        'price'?: number;
        'currency'?: v1.isp.Currency;
    }
}
export declare namespace v1.isp {
    /**
     * Defines the structure for privacy and compliance.
     * @interface
     */
    interface PrivacyAndCompliance {
        'locales'?: {
            [key: string]: v1.isp.LocalizedPrivacyAndCompliance;
        };
    }
}
export declare namespace v1.isp {
    /**
     * Product ID information.
     * @interface
     */
    interface ProductResponse {
        'productId'?: string;
    }
}
export declare namespace v1.isp {
    /**
     * Type of in-skill product.
     * @enum
     */
    type ProductType = 'SUBSCRIPTION' | 'ENTITLEMENT' | 'CONSUMABLE';
}
export declare namespace v1.isp {
    /**
     * Defines the structure for in-skill product publishing information.
     * @interface
     */
    interface PublishingInformation {
        'locales'?: {
            [key: string]: v1.isp.LocalizedPublishingInformation;
        };
        'distributionCountries'?: Array<v1.isp.DistributionCountries>;
        'pricing'?: {
            [key: string]: v1.isp.MarketplacePricing;
        };
        'taxInformation'?: v1.isp.TaxInformation;
    }
}
export declare namespace v1.isp {
    /**
     * Whether or not the in-skill product is purchasable by customers. A product that is not purchasable will prevent new customers from being prompted to purchase the product. Customers who already own the product will see no effect and continue to have access to the product features.
     * @enum
     */
    type PurchasableState = 'PURCHASABLE' | 'NOT_PURCHASABLE';
}
export declare namespace v1.isp {
    /**
     * Stage of in-skill product.
     * @enum
     */
    type Stage = 'development' | 'live';
}
export declare namespace v1.isp {
    /**
     * Current status of in-skill product.
     * @enum
     */
    type Status = 'INCOMPLETE' | 'COMPLETE' | 'CERTIFICATION' | 'PUBLISHED' | 'SUPPRESSED';
}
export declare namespace v1.isp {
    /**
     * Defines the structure for in-skill product subscription information.
     * @interface
     */
    interface SubscriptionInformation {
        'subscriptionPaymentFrequency'?: v1.isp.SubscriptionPaymentFrequency;
        'subscriptionTrialPeriodDays'?: number;
    }
}
export declare namespace v1.isp {
    /**
     * Localized in-skill product pricing information.
     * @interface
     */
    interface SummaryMarketplacePricing {
        'releaseDate'?: string;
        'defaultPriceListing'?: v1.isp.SummaryPriceListing;
    }
}
export declare namespace v1.isp {
    /**
     * Price listing information for in-skill product.
     * @interface
     */
    interface SummaryPriceListing {
        'price'?: number;
        'primeMemberPrice'?: number;
        'currency'?: v1.isp.Currency;
    }
}
export declare namespace v1.isp {
    /**
     * Defines the structure for in-skill product tax information.
     * @interface
     */
    interface TaxInformation {
        'category'?: v1.isp.TaxInformationCategory;
    }
}
export declare namespace v1.isp {
    /**
     * Select tax category that best describes in-skill product. Choice will be validated during certification process.
     * @enum
     */
    type TaxInformationCategory = 'SOFTWARE' | 'STREAMING_AUDIO' | 'STREAMING_RADIO' | 'INFORMATION_SERVICES' | 'VIDEO' | 'PERIODICALS' | 'NEWSPAPERS';
}
export declare namespace v1.isp {
    /**
     *
     * @interface
     */
    interface CreateInSkillProductRequest {
        'vendorId'?: string;
        'inSkillProductDefinition'?: v1.isp.InSkillProductDefinition;
    }
}
export declare namespace v1.isp {
    /**
     * The frequency in which payments are collected for the subscription.
     * @enum
     */
    type SubscriptionPaymentFrequency = 'MONTHLY' | 'YEARLY';
}
export declare namespace v1.isp {
    /**
     *
     * @interface
     */
    interface UpdateInSkillProductRequest {
        'inSkillProductDefinition'?: v1.isp.InSkillProductDefinition;
    }
}
export declare namespace v1.skill {
    /**
     * Action of a resource.
     * @enum
     */
    type Action = 'CREATE' | 'UPDATE' | 'ASSOCIATE' | 'DISASSOCIATE';
}
export declare namespace v1.skill {
    /**
     * Type of the agreement that the customer must be compliant to.
     * @enum
     */
    type AgreementType = 'EXPORT_COMPLIANCE';
}
export declare namespace v1.skill.AlexaHosted {
    /**
     * Alexa hosted skill create configuration
     * @interface
     */
    interface AlexaHostedConfig {
        'runtime'?: v1.skill.AlexaHosted.HostedSkillRuntime;
    }
}
export declare namespace v1.skill.AlexaHosted {
    /**
     *
     * @interface
     */
    interface HostedSkillInfo {
        'repository'?: v1.skill.AlexaHosted.HostedSkillRepositoryInfo;
        'runtime'?: v1.skill.AlexaHosted.HostedSkillRuntime;
    }
}
export declare namespace v1.skill.AlexaHosted {
    /**
     * Alexa Hosted skill's metadata
     * @interface
     */
    interface HostedSkillMetadata {
        'alexaHosted'?: v1.skill.AlexaHosted.HostedSkillInfo;
    }
}
export declare namespace v1.skill.AlexaHosted {
    /**
     * Customer's permission about Hosted skill features.
     * @interface
     */
    interface HostedSkillPermission {
        'permission'?: v1.skill.AlexaHosted.HostedSkillPermissionType;
        'status'?: v1.skill.AlexaHosted.HostedSkillPermissionStatus;
        'actionUrl'?: string;
    }
}
export declare namespace v1.skill.AlexaHosted {
    /**
     *
     * @enum
     */
    type HostedSkillPermissionStatus = 'ALLOWED' | 'NEW_USER_REGISTRATION_REQUIRED' | 'RESOURCE_LIMIT_EXCEEDED' | 'RATE_EXCEEDED';
}
export declare namespace v1.skill.AlexaHosted {
    /**
     *
     * @enum
     */
    type HostedSkillPermissionType = 'NEW_SKILL';
}
export declare namespace v1.skill.AlexaHosted {
    /**
     *
     * @enum
     */
    type HostedSkillRepository = 'GIT';
}
export declare namespace v1.skill.AlexaHosted {
    /**
     *
     * @interface
     */
    interface HostedSkillRepositoryCredentials {
        'username'?: string;
        'password'?: string;
        'expiresAt'?: string;
    }
}
export declare namespace v1.skill.AlexaHosted {
    /**
     * defines the structure for the hosted skill repository credentials response
     * @interface
     */
    interface HostedSkillRepositoryCredentialsList {
        'repositoryCredentials'?: v1.skill.AlexaHosted.HostedSkillRepositoryCredentials;
    }
}
export declare namespace v1.skill.AlexaHosted {
    /**
     *
     * @interface
     */
    interface HostedSkillRepositoryCredentialsRequest {
        'repository'?: v1.skill.AlexaHosted.HostedSkillRepositoryInfo;
    }
}
export declare namespace v1.skill.AlexaHosted {
    /**
     * Alexa Hosted Skill's Repository Information
     * @interface
     */
    interface HostedSkillRepositoryInfo {
        'url'?: string;
        'type'?: v1.skill.AlexaHosted.HostedSkillRepository;
    }
}
export declare namespace v1.skill.AlexaHosted {
    /**
     * Hosted skill lambda runtime
     * @enum
     */
    type HostedSkillRuntime = 'NODE_10_X' | 'PYTHON_3_7';
}
export declare namespace v1.skill.AlexaHosted {
    /**
     * Configurations for creating new hosted skill
     * @interface
     */
    interface HostingConfiguration {
        'alexaHosted'?: v1.skill.AlexaHosted.AlexaHostedConfig;
    }
}
export declare namespace v1.skill {
    /**
     * Contains array which describes steps involved in a build. Elements (or build steps) are added to this array as they become IN_PROGRESS.
     * @interface
     */
    interface BuildDetails {
        'steps'?: Array<v1.skill.BuildStep>;
    }
}
export declare namespace v1.skill {
    /**
     * Describes the status of a build step.
     * @interface
     */
    interface BuildStep {
        'name'?: v1.skill.BuildStepName;
        'status'?: v1.skill.Status;
        'errors'?: Array<v1.skill.StandardizedError>;
    }
}
export declare namespace v1.skill {
    /**
     * Name of the build step. Possible values - * `DIALOG_MODEL_BUILD` - Build status for dialog model. * `LANGUAGE_MODEL_QUICK_BUILD` - Build status for FST model. * `LANGUAGE_MODEL_FULL_BUILD` - Build status for statistical model.
     * @enum
     */
    type BuildStepName = 'DIALOG_MODEL_BUILD' | 'LANGUAGE_MODEL_QUICK_BUILD' | 'LANGUAGE_MODEL_FULL_BUILD';
}
export declare namespace v1.skill {
    /**
     * SkillId information.
     * @interface
     */
    interface CreateSkillResponse {
        'skillId'?: string;
    }
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface ExportResponse {
        'status'?: v1.skill.ResponseStatus;
        'skill'?: v1.skill.ExportResponseSkill;
    }
}
export declare namespace v1.skill {
    /**
     * Defines the structure of the GetExport response.
     * @interface
     */
    interface ExportResponseSkill {
        'eTag'?: string;
        'location'?: string;
        'expiresAt'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Details about hosted skill deployment.
     * @interface
     */
    interface HostedSkillDeploymentDetails {
        'commitId'?: string;
        'logUrl'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Defines the most recent deployment status for the Alexa hosted skill.
     * @interface
     */
    interface HostedSkillDeploymentStatus {
        'lastUpdateRequest'?: v1.skill.HostedSkillDeploymentStatusLastUpdateRequest;
    }
}
export declare namespace v1.skill {
    /**
     * Contains attributes related to last modification request of a hosted skill deployment resource.
     * @interface
     */
    interface HostedSkillDeploymentStatusLastUpdateRequest {
        'status'?: v1.skill.Status;
        'errors'?: Array<v1.skill.StandardizedError>;
        'warnings'?: Array<v1.skill.StandardizedError>;
        'deploymentDetails'?: v1.skill.HostedSkillDeploymentDetails;
    }
}
export declare namespace v1.skill {
    /**
     * Contains attributes related to last modification request of a hosted skill provisioning resource.
     * @interface
     */
    interface HostedSkillProvisioningLastUpdateRequest {
        'status'?: v1.skill.Status;
        'errors'?: Array<v1.skill.StandardizedError>;
        'warnings'?: Array<v1.skill.StandardizedError>;
    }
}
export declare namespace v1.skill {
    /**
     * Defines the provisioning status for hosted skill.
     * @interface
     */
    interface HostedSkillProvisioningStatus {
        'lastUpdateRequest'?: v1.skill.HostedSkillProvisioningLastUpdateRequest;
    }
}
export declare namespace v1.skill {
    /**
     * Dimensions of an image.
     * @interface
     */
    interface ImageDimension {
        'widthInPixels'?: number;
        'heightInPixels'?: number;
    }
}
export declare namespace v1.skill {
    /**
     * On disk storage size of image.
     * @interface
     */
    interface ImageSize {
        'value'?: number;
        'unit'?: v1.skill.ImageSizeUnit;
    }
}
export declare namespace v1.skill {
    /**
     * Unit of measurement for size of image.
     * @enum
     */
    type ImageSizeUnit = 'MB';
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface ImportResponse {
        'status'?: v1.skill.ResponseStatus;
        'errors'?: Array<v1.skill.StandardizedError>;
        'warnings'?: Array<v1.skill.StandardizedError>;
        'skill'?: v1.skill.ImportResponseSkill;
    }
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface ImportResponseSkill {
        'skillId'?: string;
        'eTag'?: string;
        'resources': Array<v1.skill.ResourceImportStatus>;
    }
}
export declare namespace v1.skill {
    /**
     * Structure representing properties of an instance of data. Definition will be either one of a booleanInstance, stringInstance, integerInstance, or compoundInstance.
     * @interface
     */
    interface Instance {
        'propertyPath'?: string;
        'dataType'?: v1.skill.ValidationDataTypes;
        'value'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Contains attributes related to last modification (create/update) request of a resource.
     * @interface
     */
    interface InteractionModelLastUpdateRequest {
        'status'?: v1.skill.Status;
        'errors'?: Array<v1.skill.StandardizedError>;
        'warnings'?: Array<v1.skill.StandardizedError>;
        'buildDetails'?: v1.skill.BuildDetails;
    }
}
export declare namespace v1.skill {
    /**
     * Interface related objects.
     * @interface
     */
    interface InterfaceDefinition {
        'isGlobal'?: boolean;
        'locales'?: Array<string>;
        'intents'?: Array<v1.skill.InterfaceIntent>;
    }
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface InterfaceIntent {
        'isExtensible'?: boolean;
        'name'?: string;
        'isRequired'?: boolean;
    }
}
export declare namespace v1.skill {
    /**
     * List of skills for the vendor.
     * @interface
     */
    interface ListSkillResponse {
        '_links'?: v1.Links;
        'skills'?: Array<v1.skill.SkillSummary>;
        'isTruncated'?: boolean;
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure of alexaForBusiness api in the skill manifest.
     * @interface
     */
    interface AlexaForBusinessApis {
        'regions'?: {
            [key: string]: v1.skill.Manifest.Region;
        };
        'endpoint'?: v1.skill.Manifest.SkillManifestEndpoint;
        'interfaces'?: Array<v1.skill.Manifest.AlexaForBusinessInterface>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface AlexaForBusinessInterface {
        'namespace'?: string;
        'version'?: v1.skill.Manifest.Version;
        'requests'?: Array<v1.skill.Manifest.Request>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Skill connection object.
     * @interface
     */
    interface Connections {
        'name'?: string;
        'payload'?: v1.skill.Manifest.ConnectionsPayload;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Payload of the connection.
     * @interface
     */
    interface ConnectionsPayload {
        'type'?: string;
        'version'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for custom api of the skill.
     * @interface
     */
    interface CustomApis {
        'regions'?: {
            [key: string]: v1.skill.Manifest.Region;
        };
        'endpoint'?: v1.skill.Manifest.SkillManifestEndpoint;
        'interfaces'?: Array<v1.skill.Manifest.Interface>;
        'tasks'?: Array<v1.skill.Manifest.SkillManifestCustomTask>;
        'connections'?: v1.skill.Manifest.CustomConnections;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Supported connections.
     * @interface
     */
    interface CustomConnections {
        'requires'?: Array<v1.skill.Manifest.Connections>;
        'provides'?: Array<v1.skill.Manifest.Connections>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * The minimum version of the APML specification supported by the skill. If a device does not support a version greater than or equal to the version specified her then apmlVersion will not be passed inside the Display interface in the ASK request.
     * @enum
     */
    type DisplayInterfaceApmlVersion = '0.2';
}
export declare namespace v1.skill.Manifest {
    /**
     * The minimum version of pre-defined templates supported by the skill. If a device does not support a version greater than or equal to the version specified her then templateVersion will not be passed inside the Display interface in the ASK request.
     * @enum
     */
    type DisplayInterfaceTemplateVersion = '1';
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @enum
     */
    type DistributionCountries = 'AF' | 'AX' | 'AL' | 'DZ' | 'AS' | 'AD' | 'AO' | 'AI' | 'AQ' | 'AG' | 'AR' | 'AM' | 'AW' | 'AU' | 'AT' | 'AZ' | 'BS' | 'BH' | 'BD' | 'BB' | 'BY' | 'BE' | 'BZ' | 'BJ' | 'BM' | 'BT' | 'BO' | 'BA' | 'BW' | 'BV' | 'BR' | 'IO' | 'BN' | 'BG' | 'BF' | 'BI' | 'KH' | 'CM' | 'CA' | 'CV' | 'KY' | 'CF' | 'TD' | 'CL' | 'CN' | 'CX' | 'CC' | 'CO' | 'KM' | 'CG' | 'CD' | 'CK' | 'CR' | 'HR' | 'CY' | 'CZ' | 'DK' | 'DJ' | 'DM' | 'DO' | 'EC' | 'EG' | 'SV' | 'GQ' | 'ER' | 'EE' | 'ET' | 'FK' | 'FO' | 'FJ' | 'FI' | 'FR' | 'GF' | 'PF' | 'TF' | 'GA' | 'GM' | 'GE' | 'DE' | 'GH' | 'GI' | 'GR' | 'GL' | 'GD' | 'GP' | 'GU' | 'GT' | 'GG' | 'GN' | 'GW' | 'GY' | 'HT' | 'HM' | 'VA' | 'HN' | 'HK' | 'HU' | 'IS' | 'IN' | 'ID' | 'IQ' | 'IE' | 'IM' | 'IL' | 'IT' | 'CI' | 'JM' | 'JP' | 'JE' | 'JO' | 'KZ' | 'KE' | 'KI' | 'KR' | 'KW' | 'KG' | 'LA' | 'LV' | 'LB' | 'LS' | 'LR' | 'LY' | 'LI' | 'LT' | 'LU' | 'MO' | 'MK' | 'MG' | 'MW' | 'MY' | 'MV' | 'ML' | 'MT' | 'MH' | 'MQ' | 'MR' | 'MU' | 'YT' | 'MX' | 'FM' | 'MD' | 'MC' | 'MN' | 'ME' | 'MS' | 'MA' | 'MZ' | 'MM' | 'NA' | 'NR' | 'NP' | 'NL' | 'AN' | 'NC' | 'NZ' | 'NI' | 'NE' | 'NG' | 'NU' | 'NF' | 'MP' | 'NO' | 'OM' | 'PK' | 'PW' | 'PS' | 'PA' | 'PG' | 'PY' | 'PE' | 'PH' | 'PN' | 'PL' | 'PT' | 'PR' | 'QA' | 'RE' | 'RO' | 'RU' | 'RW' | 'BL' | 'SH' | 'KN' | 'LC' | 'MF' | 'PM' | 'VC' | 'WS' | 'SM' | 'ST' | 'SA' | 'SN' | 'RS' | 'SC' | 'SL' | 'SG' | 'SK' | 'SI' | 'SB' | 'SO' | 'ZA' | 'GS' | 'ES' | 'LK' | 'SR' | 'SJ' | 'SZ' | 'SE' | 'CH' | 'TW' | 'TJ' | 'TZ' | 'TH' | 'TL' | 'TG' | 'TK' | 'TO' | 'TT' | 'TN' | 'TR' | 'TM' | 'TC' | 'TV' | 'UG' | 'UA' | 'AE' | 'GB' | 'US' | 'UM' | 'UY' | 'UZ' | 'VU' | 'VE' | 'VN' | 'VG' | 'VI' | 'WF' | 'EH' | 'YE' | 'ZM' | 'ZW';
}
export declare namespace v1.skill.Manifest {
    /**
     * What audience the skill should be distributed to. \"PUBLIC\" - available to all users. Has ASIN and can be enabled. \"PRIVATE\" - available to entitled users. Has ASIN and can be enabled. \"INTERNAL\" - has no ASIN and cannot be enabled by users. Internally managed skills.
     * @enum
     */
    type DistributionMode = 'PRIVATE' | 'PUBLIC' | 'INTERNAL';
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface EventName {
        'eventName'?: v1.skill.Manifest.EventNameType;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Name of the event to be subscribed to.
     * @enum
     */
    type EventNameType = 'SKILL_ENABLED' | 'SKILL_DISABLED' | 'SKILL_PERMISSION_ACCEPTED' | 'SKILL_PERMISSION_CHANGED' | 'SKILL_ACCOUNT_LINKED' | 'ITEMS_CREATED' | 'ITEMS_UPDATED' | 'ITEMS_DELETED' | 'LIST_CREATED' | 'LIST_UPDATED' | 'LIST_DELETED' | 'ALL_LISTS_CHANGED' | 'REMINDER_STARTED' | 'REMINDER_CREATED' | 'REMINDER_UPDATED' | 'REMINDER_DELETED' | 'REMINDER_STATUS_CHANGED' | 'AUDIO_ITEM_PLAYBACK_STARTED' | 'AUDIO_ITEM_PLAYBACK_FINISHED' | 'AUDIO_ITEM_PLAYBACK_STOPPED' | 'AUDIO_ITEM_PLAYBACK_FAILED' | 'SKILL_PROACTIVE_SUBSCRIPTION_CHANGED' | 'IN_SKILL_PRODUCT_SUBSCRIPTION_STARTED' | 'IN_SKILL_PRODUCT_SUBSCRIPTION_RENEWED' | 'IN_SKILL_PRODUCT_SUBSCRIPTION_ENDED' | 'Legacy.ActivityManager.ActivityContextRemovedEvent' | 'Legacy.ActivityManager.ActivityInterrupted' | 'Legacy.ActivityManager.FocusChanged' | 'Legacy.AlertsController.DismissCommand' | 'Legacy.AlertsController.SnoozeCommand' | 'Legacy.AudioPlayer.AudioStutter' | 'Legacy.AudioPlayer.InitialPlaybackProgressReport' | 'Legacy.AudioPlayer.Metadata' | 'Legacy.AudioPlayer.PeriodicPlaybackProgressReport' | 'Legacy.AudioPlayer.PlaybackError' | 'Legacy.AudioPlayer.PlaybackFinished' | 'Legacy.AudioPlayer.PlaybackIdle' | 'Legacy.AudioPlayer.PlaybackInterrupted' | 'Legacy.AudioPlayer.PlaybackNearlyFinished' | 'Legacy.AudioPlayer.PlaybackPaused' | 'Legacy.AudioPlayer.PlaybackResumed' | 'Legacy.AudioPlayer.PlaybackStarted' | 'Legacy.AudioPlayer.PlaybackStutterFinished' | 'Legacy.AudioPlayer.PlaybackStutterStarted' | 'Legacy.AudioPlayerGui.ButtonClickedEvent' | 'Legacy.AudioPlayerGui.LyricsViewedEvent' | 'Legacy.AuxController.DirectionChanged' | 'Legacy.AuxController.EnabledStateChanged' | 'Legacy.AuxController.InputActivityStateChanged' | 'Legacy.AuxController.PluggedStateChanged' | 'Legacy.BluetoothNetwork.CancelPairingMode' | 'Legacy.BluetoothNetwork.DeviceConnectedFailure' | 'Legacy.BluetoothNetwork.DeviceConnectedSuccess' | 'Legacy.BluetoothNetwork.DeviceDisconnectedFailure' | 'Legacy.BluetoothNetwork.DeviceDisconnectedSuccess' | 'Legacy.BluetoothNetwork.DevicePairFailure' | 'Legacy.BluetoothNetwork.DevicePairSuccess' | 'Legacy.BluetoothNetwork.DeviceUnpairFailure' | 'Legacy.BluetoothNetwork.DeviceUnpairSuccess' | 'Legacy.BluetoothNetwork.EnterPairingModeFailure' | 'Legacy.BluetoothNetwork.EnterPairingModeSuccess' | 'Legacy.BluetoothNetwork.MediaControlFailure' | 'Legacy.BluetoothNetwork.MediaControlSuccess' | 'Legacy.BluetoothNetwork.ScanDevicesReport' | 'Legacy.BluetoothNetwork.SetDeviceCategoriesFailed' | 'Legacy.BluetoothNetwork.SetDeviceCategoriesSucceeded' | 'Legacy.ContentManager.ContentPlaybackTerminated' | 'Legacy.DeviceNotification.DeleteNotificationFailed' | 'Legacy.DeviceNotification.DeleteNotificationSucceeded' | 'Legacy.DeviceNotification.NotificationEnteredBackground' | 'Legacy.DeviceNotification.NotificationEnteredForground' | 'Legacy.DeviceNotification.NotificationStarted' | 'Legacy.DeviceNotification.NotificationStopped' | 'Legacy.DeviceNotification.NotificationSync' | 'Legacy.DeviceNotification.SetNotificationFailed' | 'Legacy.DeviceNotification.SetNotificationSucceeded' | 'Legacy.EqualizerController.EqualizerChanged' | 'Legacy.ExternalMediaPlayer.AuthorizationComplete' | 'Legacy.ExternalMediaPlayer.Error' | 'Legacy.ExternalMediaPlayer.Event' | 'Legacy.ExternalMediaPlayer.Login' | 'Legacy.ExternalMediaPlayer.Logout' | 'Legacy.ExternalMediaPlayer.ReportDiscoveredPlayers' | 'Legacy.ExternalMediaPlayer.RequestToken' | 'Legacy.FavoritesController.Error' | 'Legacy.FavoritesController.Response' | 'Legacy.GameEngine.GameInputEvent' | 'Legacy.HomeAutoWifiController.DeviceReconnected' | 'Legacy.HomeAutoWifiController.HttpNotified' | 'Legacy.HomeAutoWifiController.SsdpDiscoveryFinished' | 'Legacy.HomeAutoWifiController.SsdpServiceDiscovered' | 'Legacy.HomeAutoWifiController.SsdpServiceTerminated' | 'Legacy.ListModel.AddItemRequest' | 'Legacy.ListModel.DeleteItemRequest' | 'Legacy.ListModel.GetPageByOrdinalRequest' | 'Legacy.ListModel.GetPageByTokenRequest' | 'Legacy.ListModel.ListStateUpdateRequest' | 'Legacy.ListModel.UpdateItemRequest' | 'Legacy.ListRenderer.GetListPageByOrdinal' | 'Legacy.ListRenderer.GetListPageByToken' | 'Legacy.ListRenderer.ListItemEvent' | 'Legacy.MediaGrouping.GroupChangeNotificationEvent' | 'Legacy.MediaGrouping.GroupChangeResponseEvent' | 'Legacy.MediaGrouping.GroupSyncEvent' | 'Legacy.MediaPlayer.PlaybackError' | 'Legacy.MediaPlayer.PlaybackFinished' | 'Legacy.MediaPlayer.PlaybackIdle' | 'Legacy.MediaPlayer.PlaybackNearlyFinished' | 'Legacy.MediaPlayer.PlaybackPaused' | 'Legacy.MediaPlayer.PlaybackResumed' | 'Legacy.MediaPlayer.PlaybackStarted' | 'Legacy.MediaPlayer.PlaybackStopped' | 'Legacy.MediaPlayer.SequenceItemsRequested' | 'Legacy.MediaPlayer.SequenceModified' | 'Legacy.MeetingClientController.Event' | 'Legacy.Microphone.AudioRecording' | 'Legacy.PhoneCallController.Event' | 'Legacy.PlaybackController.ButtonCommand' | 'Legacy.PlaybackController.LyricsViewedEvent' | 'Legacy.PlaybackController.NextCommand' | 'Legacy.PlaybackController.PauseCommand' | 'Legacy.PlaybackController.PlayCommand' | 'Legacy.PlaybackController.PreviousCommand' | 'Legacy.PlaybackController.ToggleCommand' | 'Legacy.PlaylistController.ErrorResponse' | 'Legacy.PlaylistController.Response' | 'Legacy.Presentation.PresentationDismissedEvent' | 'Legacy.Presentation.PresentationUserEvent' | 'Legacy.SconeRemoteControl.Next' | 'Legacy.SconeRemoteControl.PlayPause' | 'Legacy.SconeRemoteControl.Previous' | 'Legacy.SconeRemoteControl.VolumeDown' | 'Legacy.SconeRemoteControl.VolumeUp' | 'Legacy.SipClient.Event' | 'Legacy.SoftwareUpdate.CheckSoftwareUpdateReport' | 'Legacy.SoftwareUpdate.InitiateSoftwareUpdateReport' | 'Legacy.Speaker.MuteChanged' | 'Legacy.Speaker.VolumeChanged' | 'Legacy.SpeechRecognizer.WakeWordChanged' | 'Legacy.SpeechSynthesizer.SpeechFinished' | 'Legacy.SpeechSynthesizer.SpeechInterrupted' | 'Legacy.SpeechSynthesizer.SpeechStarted' | 'Legacy.SpeechSynthesizer.SpeechSynthesizerError' | 'Legacy.Spotify.Event' | 'Legacy.System.UserInactivity' | 'Legacy.UDPController.BroadcastResponse' | 'LocalApplication.Alexa.Translation.LiveTranslation.Event' | 'LocalApplication.AlexaNotifications.Event' | 'LocalApplication.AlexaPlatformTestSpeechlet.Event' | 'LocalApplication.AlexaVision.Event' | 'LocalApplication.AlexaVoiceLayer.Event' | 'LocalApplication.AvaPhysicalShopping.Event' | 'LocalApplication.Calendar.Event' | 'LocalApplication.Closet.Event' | 'LocalApplication.Communications.Event' | 'LocalApplication.DeviceMessaging.Event' | 'LocalApplication.DigitalDash.Event' | 'LocalApplication.FireflyShopping.Event' | 'LocalApplication.Gallery.Event' | 'LocalApplication.HHOPhotos.Event' | 'LocalApplication.HomeAutomationMedia.Event' | 'LocalApplication.KnightContacts.Event' | 'LocalApplication.KnightHome.Event' | 'LocalApplication.KnightHomeThingsToTry.Event' | 'LocalApplication.LocalMediaPlayer.Event' | 'LocalApplication.LocalVoiceUI.Event' | 'LocalApplication.MShop.Event' | 'LocalApplication.MShopPurchasing.Event' | 'LocalApplication.NotificationsApp.Event' | 'LocalApplication.Photos.Event' | 'LocalApplication.Sentry.Event' | 'LocalApplication.SipClient.Event' | 'LocalApplication.SipUserAgent.Event' | 'LocalApplication.todoRenderer.Event' | 'LocalApplication.VideoExperienceService.Event' | 'LocalApplication.WebVideoPlayer.Event' | 'Alexa.Camera.PhotoCaptureController.CancelCaptureFailed' | 'Alexa.Camera.PhotoCaptureController.CancelCaptureFinished' | 'Alexa.Camera.PhotoCaptureController.CaptureFailed' | 'Alexa.Camera.PhotoCaptureController.CaptureFinished' | 'Alexa.Camera.VideoCaptureController.CancelCaptureFailed' | 'Alexa.Camera.VideoCaptureController.CancelCaptureFinished' | 'Alexa.Camera.VideoCaptureController.CaptureFailed' | 'Alexa.Camera.VideoCaptureController.CaptureFinished' | 'Alexa.Camera.VideoCaptureController.CaptureStarted' | 'Alexa.FileManager.UploadController.CancelUploadFailed' | 'Alexa.FileManager.UploadController.CancelUploadFinished' | 'Alexa.FileManager.UploadController.UploadFailed' | 'Alexa.FileManager.UploadController.UploadFinished' | 'Alexa.FileManager.UploadController.UploadStarted' | 'Alexa.Presentation.APL.UserEvent' | 'Alexa.Presentation.HTML.Event' | 'Alexa.Presentation.HTML.LifecycleStateChanged' | 'Alexa.Presentation.PresentationDismissed' | 'AudioPlayer.PlaybackFailed' | 'AudioPlayer.PlaybackFinished' | 'AudioPlayer.PlaybackNearlyFinished' | 'AudioPlayer.PlaybackStarted' | 'AudioPlayer.PlaybackStopped' | 'CardRenderer.DisplayContentFinished' | 'CardRenderer.DisplayContentStarted' | 'CardRenderer.ReadContentFinished' | 'CardRenderer.ReadContentStarted' | 'CustomInterfaceController.EventsReceived' | 'CustomInterfaceController.Expired' | 'DeviceSetup.SetupCompleted' | 'Display.ElementSelected' | 'Display.UserEvent' | 'FitnessSessionController.FitnessSessionEnded' | 'FitnessSessionController.FitnessSessionError' | 'FitnessSessionController.FitnessSessionPaused' | 'FitnessSessionController.FitnessSessionResumed' | 'FitnessSessionController.FitnessSessionStarted' | 'GameEngine.InputHandlerEvent' | 'Messaging.MessageReceived' | 'MessagingController.UpdateConversationsStatus' | 'MessagingController.UpdateMessagesStatusRequest' | 'MessagingController.UpdateSendMessageStatusRequest' | 'MessagingController.UploadConversations' | 'PlaybackController.NextCommandIssued' | 'PlaybackController.PauseCommandIssued' | 'PlaybackController.PlayCommandIssued' | 'PlaybackController.PreviousCommandIssued' | 'EffectsController.RequestEffectChangeRequest' | 'EffectsController.RequestGuiChangeRequest' | 'EffectsController.StateReceiptChangeRequest';
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface EventPublications {
        'eventName'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for flash briefing api of the skill.
     * @interface
     */
    interface FlashBriefingApis {
        'locales'?: {
            [key: string]: v1.skill.Manifest.LocalizedFlashBriefingInfo;
        };
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * format of the feed content.
     * @enum
     */
    type FlashBriefingContentType = 'TEXT' | 'AUDIO' | 'AUDIO_AND_VIDEO';
}
export declare namespace v1.skill.Manifest {
    /**
     * Type or subject of the content in the feed.
     * @enum
     */
    type FlashBriefingGenre = 'HEADLINE_NEWS' | 'BUSINESS' | 'POLITICS' | 'ENTERTAINMENT' | 'TECHNOLOGY' | 'HUMOR' | 'LIFESTYLE' | 'SPORTS' | 'SCIENCE' | 'HEALTH_AND_FITNESS' | 'ARTS_AND_CULTURE' | 'PRODUCTIVITY_AND_UTILITIES' | 'OTHER';
}
export declare namespace v1.skill.Manifest {
    /**
     * Tells how often the feed has new content.
     * @enum
     */
    type FlashBriefingUpdateFrequency = 'HOURLY' | 'DAILY' | 'WEEKLY' | 'UNKNOWN';
}
export declare namespace v1.skill.Manifest {
    /**
     * Specifies if gadget support is required/optional for this skill to work.
     * @enum
     */
    type GadgetSupport = 'REQUIRED' | 'OPTIONAL';
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface HealthAlias {
        'name'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure of health api in the skill manifest.
     * @interface
     */
    interface HealthApis {
        'regions'?: {
            [key: string]: v1.skill.Manifest.Region;
        };
        'endpoint'?: v1.skill.Manifest.SkillManifestEndpoint;
        'protocolVersion'?: v1.skill.Manifest.HealthProtocolVersion;
        'interfaces'?: v1.skill.Manifest.HealthInterface;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface HealthInterface {
        'namespace'?: string;
        'version'?: v1.skill.Manifest.Version;
        'requests'?: Array<v1.skill.Manifest.HealthRequest>;
        'locales'?: {
            [key: string]: v1.skill.Manifest.LocalizedHealthInfo;
        };
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @enum
     */
    type HealthProtocolVersion = '1' | '2';
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface HealthRequest {
        'name'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure of household list api in the skill manifest.
     * @interface
     */
    interface HouseHoldList {
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    type Interface = v1.skill.Manifest.AlexaPresentationAplInterface | v1.skill.Manifest.CustomInterface | v1.skill.Manifest.AlexaPresentationHtmlInterface | v1.skill.Manifest.AudioInterface | v1.skill.Manifest.GameEngineInterface | v1.skill.Manifest.DisplayInterface | v1.skill.Manifest.GadgetControllerInterface | v1.skill.Manifest.VideoAppInterface;
}
export declare namespace v1.skill.Manifest {
    /**
     * Contains the uri field. This sets the global default endpoint.
     * @interface
     */
    interface LambdaEndpoint {
        'uri': string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure of a regional information.
     * @interface
     */
    interface LambdaRegion {
        'endpoint'?: v1.skill.Manifest.LambdaEndpoint;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the localized flash briefing api information.
     * @interface
     */
    interface LocalizedFlashBriefingInfo {
        'feeds'?: Array<v1.skill.Manifest.LocalizedFlashBriefingInfoItems>;
        'customErrorMessage'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface LocalizedFlashBriefingInfoItems {
        'logicalName'?: string;
        'name'?: string;
        'url'?: string;
        'imageUri'?: string;
        'contentType'?: v1.skill.Manifest.FlashBriefingContentType;
        'genre'?: v1.skill.Manifest.FlashBriefingGenre;
        'updateFrequency'?: v1.skill.Manifest.FlashBriefingUpdateFrequency;
        'vuiPreamble'?: string;
        'isDefault'?: boolean;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for health skill locale specific publishing information in the skill manifest.
     * @interface
     */
    interface LocalizedHealthInfo {
        'promptName'?: string;
        'aliases'?: Array<v1.skill.Manifest.HealthAlias>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure of localized music information in the skill manifest.
     * @interface
     */
    interface LocalizedMusicInfo {
        'promptName'?: string;
        'aliases'?: Array<v1.skill.Manifest.MusicAlias>;
        'features'?: Array<v1.skill.Manifest.MusicFeature>;
        'wordmarkLogos'?: Array<v1.skill.Manifest.MusicWordmark>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for gadget buttons support in the skill manifest.
     * @interface
     */
    interface ManifestGadgetSupport {
        'requirement'?: v1.skill.Manifest.GadgetSupport;
        'minGadgetButtons'?: number;
        'maxGadgetButtons'?: number;
        'numPlayersMax'?: number;
        'numPlayersMin'?: number;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface MusicAlias {
        'name'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure of music api in the skill manifest.
     * @interface
     */
    interface MusicApis {
        'regions'?: {
            [key: string]: v1.skill.Manifest.LambdaRegion;
        };
        'endpoint'?: v1.skill.Manifest.LambdaEndpoint;
        'capabilities'?: Array<v1.skill.Manifest.MusicCapability>;
        'interfaces'?: v1.skill.Manifest.MusicInterfaces;
        'locales'?: {
            [key: string]: v1.skill.Manifest.LocalizedMusicInfo;
        };
        'contentTypes'?: Array<v1.skill.Manifest.MusicContentType>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface MusicCapability {
        'namespace'?: string;
        'name'?: string;
        'version'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Name of the content type that's supported for the music skill.
     * @enum
     */
    type MusicContentName = 'ON_DEMAND' | 'RADIO' | 'PODCAST';
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for content that can be provided by a music skill.
     * @interface
     */
    interface MusicContentType {
        'name'?: v1.skill.Manifest.MusicContentName;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface MusicFeature {
        'name'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface MusicInterfaces {
        'namespace'?: string;
        'version'?: string;
        'requests'?: Array<v1.skill.Manifest.MusicRequest>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface MusicRequest {
        'name'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface MusicWordmark {
        'uri'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface PermissionItems {
        'name'?: v1.skill.Manifest.PermissionName;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Name of the required permission.
     * @enum
     */
    type PermissionName = 'payments:autopay_consent' | 'alexa::async_event:write' | 'avs::distributed_audio' | 'alexa::devices:all:address:full:read' | 'alexa:devices:all:address:country_and_postal_code:read' | 'alexa::devices:all:geolocation:read' | 'alexa::health:profile:write' | 'alexa::household:lists:read' | 'alexa::household:lists:write' | 'alexa::personality:explicit:read' | 'alexa::personality:explicit:write' | 'alexa::profile:name:read' | 'alexa::profile:email:read' | 'alexa::profile:mobile_number:read' | 'alexa::profile:given_name:read' | 'alexa::customer_id:read' | 'alexa::person_id:read' | 'alexa::raw_person_id:read' | 'alexa::devices:all:notifications:write' | 'alexa::devices:all:notifications:urgent:write' | 'alexa::alerts:reminders:skill:readwrite' | 'alexa::alerts:timers:skill:readwrite' | 'alexa::skill:cds:monetization' | 'alexa::music:cast' | 'alexa::skill:products:entitlements' | 'alexa::skill:proactive_enablement' | 'alexa::authenticate:2:mandatory' | 'alexa::authenticate:2:optional' | 'alexa::user_experience_guidance:read' | 'alexa::device_id:read' | 'alexa::device_type:read';
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for regional information.
     * @interface
     */
    interface Region {
        'endpoint'?: v1.skill.Manifest.SkillManifestEndpoint;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface Request {
        'name'?: v1.skill.Manifest.RequestName;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Name of the request.
     * @enum
     */
    type RequestName = 'Search' | 'Create' | 'Update';
}
export declare namespace v1.skill.Manifest {
    /**
     * The SSL certificate type of the skill's HTTPS endpoint. Only valid for HTTPS endpoint not for AWS Lambda ARN.
     * @enum
     */
    type SSLCertificateType = 'SelfSigned' | 'Wildcard' | 'Trusted';
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for a skill's metadata.
     * @interface
     */
    interface SkillManifest {
        'manifestVersion'?: string;
        'publishingInformation'?: v1.skill.Manifest.SkillManifestPublishingInformation;
        'privacyAndCompliance'?: v1.skill.Manifest.SkillManifestPrivacyAndCompliance;
        'events'?: v1.skill.Manifest.SkillManifestEvents;
        'permissions'?: Array<v1.skill.Manifest.PermissionItems>;
        'apis'?: v1.skill.Manifest.SkillManifestApis;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for implemented apis information in the skill manifest.
     * @interface
     */
    interface SkillManifestApis {
        'flashBriefing'?: v1.skill.Manifest.FlashBriefingApis;
        'custom'?: v1.skill.Manifest.CustomApis;
        'smartHome'?: v1.skill.Manifest.SmartHomeApis;
        'video'?: v1.skill.Manifest.VideoApis;
        'alexaForBusiness'?: v1.skill.Manifest.AlexaForBusinessApis;
        'health'?: v1.skill.Manifest.HealthApis;
        'householdList'?: v1.skill.Manifest.HouseHoldList;
        'music'?: v1.skill.Manifest.MusicApis;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the name and version of the task that the skill wants to handle.
     * @interface
     */
    interface SkillManifestCustomTask {
        'name': string;
        'version': string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for endpoint information in the skill manifest.
     * @interface
     */
    interface SkillManifestEndpoint {
        'uri'?: string;
        'sslCertificateType'?: v1.skill.Manifest.SSLCertificateType;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface SkillManifestEnvelope {
        'manifest'?: v1.skill.Manifest.SkillManifest;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for subscribed events information in the skill manifest.
     * @interface
     */
    interface SkillManifestEvents {
        'subscriptions'?: Array<v1.skill.Manifest.EventName>;
        'publications'?: Array<v1.skill.Manifest.EventPublications>;
        'regions'?: {
            [key: string]: v1.skill.Manifest.Region;
        };
        'endpoint'?: v1.skill.Manifest.SkillManifestEndpoint;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for locale specific privacy & compliance information in the skill manifest.
     * @interface
     */
    interface SkillManifestLocalizedPrivacyAndCompliance {
        'privacyPolicyUrl'?: string;
        'termsOfUseUrl'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for locale specific publishing information in the skill manifest.
     * @interface
     */
    interface SkillManifestLocalizedPublishingInformation {
        'name'?: string;
        'smallIconUri'?: string;
        'largeIconUri'?: string;
        'summary'?: string;
        'description'?: string;
        'updatesDescription'?: string;
        'examplePhrases'?: Array<string>;
        'keywords'?: Array<string>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for privacy & compliance information in the skill manifest.
     * @interface
     */
    interface SkillManifestPrivacyAndCompliance {
        'locales'?: {
            [key: string]: v1.skill.Manifest.SkillManifestLocalizedPrivacyAndCompliance;
        };
        'allowsPurchases'?: boolean;
        'usesPersonalInfo'?: boolean;
        'isChildDirected'?: boolean;
        'isExportCompliant'?: boolean;
        'containsAds'?: boolean;
        'usesHealthInfo'?: boolean;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for publishing information in the skill manifest.
     * @interface
     */
    interface SkillManifestPublishingInformation {
        'name'?: string;
        'description'?: string;
        'locales'?: {
            [key: string]: v1.skill.Manifest.SkillManifestLocalizedPublishingInformation;
        };
        'isAvailableWorldwide'?: boolean;
        'distributionMode'?: v1.skill.Manifest.DistributionMode;
        'gadgetSupport'?: v1.skill.Manifest.ManifestGadgetSupport;
        'testingInstructions'?: string;
        'category'?: string;
        'distributionCountries'?: Array<v1.skill.Manifest.DistributionCountries>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for smart home api of the skill.
     * @interface
     */
    interface SmartHomeApis {
        'regions'?: {
            [key: string]: v1.skill.Manifest.LambdaRegion;
        };
        'endpoint'?: v1.skill.Manifest.LambdaEndpoint;
        'protocolVersion'?: v1.skill.Manifest.SmartHomeProtocol;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Version of the Smart Home API. Default and recommended value is '3'. You may create a skill with version '2' for testing migration to version '3', but a skill submission using version '2' will not be certified.
     * @enum
     */
    type SmartHomeProtocol = '1' | '2' | '2.5' | '2.9' | '3';
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface UpChannelItems {
        'type'?: string;
        'uri'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Version of the interface.
     * @enum
     */
    type Version = '1';
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for video api of the skill.
     * @interface
     */
    interface VideoApis {
        'regions'?: {
            [key: string]: v1.skill.Manifest.VideoRegion;
        };
        'locales'?: {
            [key: string]: v1.skill.Manifest.VideoApisLocale;
        };
        'endpoint'?: v1.skill.Manifest.LambdaEndpoint;
        'countries'?: {
            [key: string]: v1.skill.Manifest.VideoCountryInfo;
        };
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for localized video api information.
     * @interface
     */
    interface VideoApisLocale {
        'videoProviderTargetingNames'?: Array<string>;
        'videoProviderLogoUri'?: string;
        'catalogInformation'?: Array<v1.skill.Manifest.VideoCatalogInfo>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface VideoCatalogInfo {
        'sourceId'?: string;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure of per-country video info in the skill manifest.
     * @interface
     */
    interface VideoCountryInfo {
        'catalogInformation'?: Array<v1.skill.Manifest.VideoCatalogInfo>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the structure for endpoint information.
     * @interface
     */
    interface VideoRegion {
        'endpoint'?: v1.skill.Manifest.LambdaEndpoint;
        'upchannel'?: Array<v1.skill.Manifest.UpChannelItems>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the mode of viewport that comply with this specification. E.g. HUB TV.
     * @enum
     */
    type ViewportMode = 'HUB' | 'TV';
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines the shape of the device's viewport.
     * @enum
     */
    type ViewportShape = 'RECTANGLE' | 'ROUND';
}
export declare namespace v1.skill.Manifest {
    /**
     * Defines a viewport specification.
     * @interface
     */
    interface ViewportSpecification {
        'mode': v1.skill.Manifest.ViewportMode;
        'shape': v1.skill.Manifest.ViewportShape;
        'minWidth'?: number;
        'maxWidth'?: number;
        'minHeight'?: number;
        'maxHeight'?: number;
    }
}
export declare namespace v1.skill {
    /**
     * Contains attributes related to last modification (create/update) request of a resource.
     * @interface
     */
    interface ManifestLastUpdateRequest {
        'status'?: v1.skill.Status;
        'errors'?: Array<v1.skill.StandardizedError>;
        'warnings'?: Array<v1.skill.StandardizedError>;
        'version'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Defines the structure for a resource status.
     * @interface
     */
    interface ManifestStatus {
        'lastUpdateRequest'?: v1.skill.ManifestLastUpdateRequest;
        'eTag'?: string;
    }
}
export declare namespace v1.skill.Private {
    /**
     * Enterprise IT administrators' action on the private distribution.
     * @enum
     */
    type AcceptStatus = 'ACCEPTED' | 'PENDING';
}
export declare namespace v1.skill.Private {
    /**
     * Response of ListPrivateDistributionAccounts.
     * @interface
     */
    interface ListPrivateDistributionAccountsResponse {
        '_links'?: v1.Links;
        'privateDistributionAccounts'?: Array<v1.skill.Private.PrivateDistributionAccount>;
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.Private {
    /**
     * Contains information of the private distribution account with given id.
     * @interface
     */
    interface PrivateDistributionAccount {
        'principal'?: string;
        'acceptStatus'?: v1.skill.Private.AcceptStatus;
    }
}
export declare namespace v1.skill {
    /**
     * Determines if the skill should be submitted only for certification and manually publish later or publish immediately after the skill is certified. Omitting the publication method will default to auto publishing.
     * @enum
     */
    type PublicationMethod = 'MANUAL_PUBLISHING' | 'AUTO_PUBLISHING';
}
export declare namespace v1.skill {
    /**
     * Publication status of the skill. It is associated with the skill's stage. Skill in 'development' stage can have publication status as 'DEVELOPMENT' or 'CERTIFICATION'. Skill in 'certified' stage can have publication status as 'CERTIFIED'. 'Skill in 'live' stage can have publication status as 'PUBLISHED', 'HIDDEN' or 'REMOVED'. * `DEVELOPMENT` - The skill is available only to you. If you have enabled it for testing, you can test it on devices registered to your developer account. * `CERTIFICATION` - Amazon is currently reviewing the skill for publication. During this time, you cannot edit the configuration. * `CERTIFIED` - The skill has been certified and ready to be published. Skill can be either published immediately or an future release date can be set for the skill. You cannot edit the configuration for the certified skills. To start development, make your changes on the development version. * `PUBLISHED` - The skill has been published and is available to users. You cannot edit the configuration for live skills. To start development on an updated version, make your changes on the development version instead. * `HIDDEN` - The skill has been published but is no longer available to new users for activation. Existing users can still invoke this skill. * `REMOVED` - The skill has been published but removed for use, due to Amazon's policy violation. You can update your skill and publish a new version to live to address the policy violation.
     * @enum
     */
    type PublicationStatus = 'DEVELOPMENT' | 'CERTIFICATION' | 'CERTIFIED' | 'PUBLISHED' | 'HIDDEN' | 'REMOVED';
}
export declare namespace v1.skill {
    /**
     * The reason to withdraw.
     * @enum
     */
    type Reason = 'TEST_SKILL' | 'MORE_FEATURES' | 'DISCOVERED_ISSUE' | 'NOT_RECEIVED_CERTIFICATION_FEEDBACK' | 'NOT_INTEND_TO_PUBLISH' | 'OTHER';
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface RegionalSSLCertificate {
        'sslCertificate'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Defines the structure for a resource deployment status.
     * @interface
     */
    interface ResourceImportStatus {
        'name'?: string;
        'status': v1.skill.ResponseStatus;
        'action'?: v1.skill.Action;
        'errors'?: Array<v1.skill.StandardizedError>;
        'warnings'?: Array<v1.skill.StandardizedError>;
    }
}
export declare namespace v1.skill {
    /**
     * Status for a Response resource.
     * @enum
     */
    type ResponseStatus = 'FAILED' | 'IN_PROGRESS' | 'SUCCEEDED' | 'ROLLBACK_SUCCEEDED' | 'ROLLBACK_FAILED';
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface SSLCertificatePayload {
        'sslCertificate'?: string;
        'regions'?: {
            [key: string]: v1.skill.RegionalSSLCertificate;
        };
    }
}
export declare namespace v1.skill {
    /**
     * Structure for skill credentials response.
     * @interface
     */
    interface SkillCredentials {
    }
}
export declare namespace v1.skill {
    /**
     * Defines the structure for interaction model build status.
     * @interface
     */
    interface SkillInteractionModelStatus {
        'lastUpdateRequest'?: v1.skill.InteractionModelLastUpdateRequest;
        'eTag'?: string;
        'version'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Defines the structure for skill messaging credentials.
     * @interface
     */
    interface SkillMessagingCredentials {
        'clientId'?: string;
        'clientSecret'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Defines the structure for skill status response.
     * @interface
     */
    interface SkillStatus {
        'manifest'?: v1.skill.ManifestStatus;
        'interactionModel'?: {
            [key: string]: v1.skill.SkillInteractionModelStatus;
        };
        'hostedSkillDeployment'?: v1.skill.HostedSkillDeploymentStatus;
        'hostedSkillProvisioning'?: v1.skill.HostedSkillProvisioningStatus;
    }
}
export declare namespace v1.skill {
    /**
     * Information about the skills.
     * @interface
     */
    interface SkillSummary {
        'skillId'?: string;
        'apis'?: Array<v1.skill.SkillSummaryApis>;
        'publicationStatus'?: v1.skill.PublicationStatus;
        'lastUpdated'?: string;
        'nameByLocale'?: {
            [key: string]: string;
        };
        'asin'?: string;
        '_links'?: v1.Links;
    }
}
export declare namespace v1.skill {
    /**
     *
     * @enum
     */
    type SkillSummaryApis = 'custom' | 'smartHome' | 'flashBriefing' | 'video' | 'music' | 'householdList' | 'health' | 'alexaForBusiness';
}
export declare namespace v1.skill {
    /**
     * Standardized structure which wraps machine parsable and human readable information about an error.
     * @interface
     */
    interface StandardizedError {
        'code'?: v1.skill.StandardizedErrorCode;
        'message'?: string;
        'validationDetails'?: v1.skill.ValidationDetails;
    }
}
export declare namespace v1.skill {
    /**
     * Status of a resource.
     * @enum
     */
    type Status = 'FAILED' | 'IN_PROGRESS' | 'SUCCEEDED';
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface SubmitSkillForCertificationRequest {
        'publicationMethod': v1.skill.PublicationMethod;
    }
}
export declare namespace v1.skill {
    /**
     * Defines the structure for skill upload response.
     * @interface
     */
    interface UploadResponse {
        'uploadUrl'?: string;
        'expiresAt'?: string;
    }
}
export declare namespace v1.skill {
    /**
     *
     * @enum
     */
    type ValidationDataTypes = 'object' | 'boolean' | 'integer' | 'array' | 'string' | 'null';
}
export declare namespace v1.skill {
    /**
     * Structure representing an endpoint.
     * @interface
     */
    interface ValidationEndpoint {
        'propertyPath'?: string;
        'type'?: string;
        'value'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Structure representing a public feature.
     * @interface
     */
    interface ValidationFeature {
        'name'?: string;
        'contact'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * The payload for the withdraw operation.
     * @interface
     */
    interface WithdrawRequest {
        'reason'?: v1.skill.Reason;
        'message'?: string;
    }
}
export declare namespace v1.skill.accountLinking {
    /**
     * The type of client authentication scheme.
     * @enum
     */
    type AccessTokenSchemeType = 'HTTP_BASIC' | 'REQUEST_BODY_CREDENTIALS';
}
export declare namespace v1.skill.accountLinking {
    /**
     * The payload for creating the account linking partner.
     * @interface
     */
    interface AccountLinkingRequest {
        'type'?: v1.skill.accountLinking.AccountLinkingType;
        'authorizationUrl'?: string;
        'domains'?: Array<string>;
        'clientId'?: string;
        'scopes'?: Array<string>;
        'accessTokenUrl'?: string;
        'clientSecret'?: string;
        'accessTokenScheme'?: v1.skill.accountLinking.AccessTokenSchemeType;
        'defaultTokenExpirationInSeconds'?: number;
        'reciprocalAccessTokenUrl'?: string;
        'redirectUrls'?: Array<string>;
    }
}
export declare namespace v1.skill.accountLinking {
    /**
     * The account linking information of a skill.
     * @interface
     */
    interface AccountLinkingResponse {
        'type'?: v1.skill.accountLinking.AccountLinkingType;
        'authorizationUrl'?: string;
        'domains'?: Array<string>;
        'clientId'?: string;
        'scopes'?: Array<string>;
        'accessTokenUrl'?: string;
        'accessTokenScheme'?: v1.skill.accountLinking.AccessTokenSchemeType;
        'defaultTokenExpirationInSeconds'?: number;
        'redirectUrls'?: Array<string>;
    }
}
export declare namespace v1.skill.accountLinking {
    /**
     * The type of account linking.
     * @enum
     */
    type AccountLinkingType = 'AUTH_CODE' | 'IMPLICIT';
}
export declare namespace v1.skill.betaTest {
    /**
     * Beta test for an Alexa skill.
     * @interface
     */
    interface BetaTest {
        'expiryDate'?: string;
        'status'?: v1.skill.betaTest.Status;
        'feedbackEmail'?: string;
        'invitationUrl'?: string;
        'invitesRemaining'?: number;
    }
}
export declare namespace v1.skill.betaTest {
    /**
     * Status of the beta test.
     * @enum
     */
    type Status = 'IN_DRAFT' | 'STARTING' | 'RUNNING' | 'STOPPING' | 'ENDED';
}
export declare namespace v1.skill.betaTest {
    /**
     * Beta test meta-data.
     * @interface
     */
    interface TestBody {
        'feedbackEmail'?: string;
    }
}
export declare namespace v1.skill.betaTest.testers {
    /**
     * Indicates whether the tester has accepted the invitation.
     * @enum
     */
    type InvitationStatus = 'ACCEPTED' | 'NOT_ACCEPTED';
}
export declare namespace v1.skill.betaTest.testers {
    /**
     *
     * @interface
     */
    interface ListTestersResponse {
        'testers'?: Array<v1.skill.betaTest.testers.TesterWithDetails>;
        'isTruncated'?: boolean;
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.betaTest.testers {
    /**
     *
     * @interface
     */
    interface Tester {
        'emailId'?: string;
    }
}
export declare namespace v1.skill.betaTest.testers {
    /**
     * Tester information.
     * @interface
     */
    interface TesterWithDetails {
        'emailId'?: string;
        'associationDate'?: string;
        'isReminderAllowed'?: boolean;
        'invitationStatus'?: v1.skill.betaTest.testers.InvitationStatus;
    }
}
export declare namespace v1.skill.betaTest.testers {
    /**
     * List of testers.
     * @interface
     */
    interface TestersList {
        'testers'?: Array<v1.skill.betaTest.testers.Tester>;
    }
}
export declare namespace v1.skill.certification {
    /**
     *
     * @interface
     */
    interface CertificationResponse {
        'id'?: string;
        'status'?: v1.skill.certification.CertificationStatus;
        'skillSubmissionTimestamp'?: string;
        'reviewTrackingInfo'?: v1.skill.certification.ReviewTrackingInfo;
        'result'?: v1.skill.certification.CertificationResult;
    }
}
export declare namespace v1.skill.certification {
    /**
     * Structure for the result for the outcomes of certification review for the skill. Currently provides the distribution information of a skill if the certification SUCCEEDED.
     * @interface
     */
    interface CertificationResult {
        'distributionInfo'?: v1.skill.certification.DistributionInfo;
    }
}
export declare namespace v1.skill.certification {
    /**
     * String that specifies the current status of skill's certification Possible values are \"IN_PROGRESS\", \"SUCCEEDED\", \"FAILED\" and \"CANCELLED\"
     * @enum
     */
    type CertificationStatus = 'IN_PROGRESS' | 'SUCCEEDED' | 'FAILED' | 'CANCELLED';
}
export declare namespace v1.skill.certification {
    /**
     * Summary of the certification resource. This is a leaner view of the certification resource for the collections API.
     * @interface
     */
    interface CertificationSummary {
        'id'?: string;
        'status'?: v1.skill.certification.CertificationStatus;
        'skillSubmissionTimestamp'?: string;
        'reviewTrackingInfo'?: v1.skill.certification.ReviewTrackingInfoSummary;
    }
}
export declare namespace v1.skill.certification {
    /**
     * The distribution information for skill where Amazon distributed the skill
     * @interface
     */
    interface DistributionInfo {
        'publishedCountries'?: Array<string>;
        'publicationFailures'?: Array<v1.skill.certification.PublicationFailure>;
    }
}
export declare namespace v1.skill.certification {
    /**
     * Structure for any updates to estimation completion time for certification review for the skill.
     * @interface
     */
    interface EstimationUpdate {
        'originalEstimatedCompletionTimestamp'?: string;
        'revisedEstimatedCompletionTimestamp'?: string;
        'reason'?: string;
    }
}
export declare namespace v1.skill.certification {
    /**
     * List of certification summary for a skill.
     * @interface
     */
    interface ListCertificationsResponse {
        '_links'?: v1.Links;
        'isTruncated'?: boolean;
        'nextToken'?: string;
        'totalCount'?: number;
        'items'?: Array<v1.skill.certification.CertificationSummary>;
    }
}
export declare namespace v1.skill.certification {
    /**
     * Information about why the skill was not published in certain countries.
     * @interface
     */
    interface PublicationFailure {
        'reason'?: string;
        'countries'?: Array<string>;
    }
}
export declare namespace v1.skill.certification {
    /**
     * Structure for review tracking information of the skill.
     * @interface
     */
    interface ReviewTrackingInfo {
        'estimatedCompletionTimestamp'?: string;
        'actualCompletionTimestamp'?: string;
        'lastUpdated'?: string;
        'estimationUpdates'?: Array<v1.skill.certification.EstimationUpdate>;
    }
}
export declare namespace v1.skill.certification {
    /**
     * Structure for summarised view of review tracking information of the skill. This does not have the estimationUpdates array field.
     * @interface
     */
    interface ReviewTrackingInfoSummary {
        'estimatedCompletionTimestamp'?: string;
        'actualCompletionTimestamp'?: string;
        'lastUpdated'?: string;
    }
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface CreateSkillRequest {
        'vendorId'?: string;
        'manifest'?: v1.skill.Manifest.SkillManifest;
        'hosting'?: v1.skill.AlexaHosted.HostingConfiguration;
    }
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface CreateSkillWithPackageRequest {
        'vendorId'?: string;
        'location'?: string;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     * An enumeration indicating whether the user has explicitly confirmed or denied the entire intent. Possible values: \"NONE\", \"CONFIRMED\", \"DENIED\".
     * @enum
     */
    type ConfirmationStatusType = 'NONE' | 'CONFIRMED' | 'DENIED';
}
export declare namespace v1.skill.evaluations {
    /**
     * A representation of question prompts to the user for multi-turn, which requires user to fill a slot value, or confirm a slot value, or confirm an intent.
     * @interface
     */
    interface DialogAct {
        'type'?: v1.skill.evaluations.DialogActType;
        'targetSlot'?: string;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     *
     * @enum
     */
    type DialogActType = 'Dialog.ElicitSlot' | 'Dialog.ConfirmSlot' | 'Dialog.ConfirmIntent';
}
export declare namespace v1.skill.evaluations {
    /**
     *
     * @interface
     */
    interface Intent {
        'name'?: string;
        'confirmationStatus'?: v1.skill.evaluations.ConfirmationStatusType;
        'slots'?: {
            [key: string]: v1.skill.evaluations.Slot;
        };
    }
}
export declare namespace v1.skill.evaluations {
    /**
     * Included when the selected intent has dialog defined and the dialog is not completed.  To continue the dialog, provide the value of the token in the multiTurnToken field in the next request.
     * @interface
     */
    interface MultiTurn {
        'dialogAct'?: v1.skill.evaluations.DialogAct;
        'token'?: string;
        'prompt'?: string;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     *
     * @interface
     */
    interface ProfileNluRequest {
        'utterance': string;
        'multiTurnToken'?: string;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     *
     * @interface
     */
    interface ProfileNluResponse {
        'sessionEnded'?: boolean;
        'selectedIntent'?: v1.skill.evaluations.ProfileNluSelectedIntent;
        'consideredIntents'?: Array<v1.skill.evaluations.Intent>;
        'multiTurn'?: v1.skill.evaluations.MultiTurn;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     *
     * @interface
     */
    interface ResolutionsPerAuthorityItems {
        'authority'?: string;
        'status'?: v1.skill.evaluations.ResolutionsPerAuthorityStatus;
        'values'?: Array<v1.skill.evaluations.ResolutionsPerAuthorityValueItems>;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     * An object representing the status of entity resolution for the slot.
     * @interface
     */
    interface ResolutionsPerAuthorityStatus {
        'code'?: v1.skill.evaluations.ResolutionsPerAuthorityStatusCode;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     * A code indicating the results of attempting to resolve the user utterance against the defined slot types. This can be one of the following: ER_SUCCESS_MATCH: The spoken value matched a value or synonym explicitly defined in your custom slot type. ER_SUCCESS_NO_MATCH: The spoken value did not match any values or synonyms explicitly defined in your custom slot type. ER_ERROR_TIMEOUT: An error occurred due to a timeout. ER_ERROR_EXCEPTION: An error occurred due to an exception during processing.
     * @enum
     */
    type ResolutionsPerAuthorityStatusCode = 'ER_SUCCESS_MATCH' | 'ER_SUCCESS_NO_MATCH' | 'ER_ERROR_TIMEOUT' | 'ER_ERROR_EXCEPTION';
}
export declare namespace v1.skill.evaluations {
    /**
     * An object representing the resolved value for the slot, based on the user's utterance and the slot type definition.
     * @interface
     */
    interface ResolutionsPerAuthorityValueItems {
        'name'?: string;
        'id'?: string;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     *
     * @interface
     */
    interface Slot {
        'name'?: string;
        'value'?: string;
        'confirmationStatus'?: v1.skill.evaluations.ConfirmationStatusType;
        'resolutions'?: v1.skill.evaluations.SlotResolutions;
    }
}
export declare namespace v1.skill.evaluations {
    /**
     * A resolutions object representing the results of resolving the words captured from the user's utterance.
     * @interface
     */
    interface SlotResolutions {
        'resolutionsPerAuthority'?: Array<v1.skill.evaluations.ResolutionsPerAuthorityItems>;
    }
}
export declare namespace v1.skill.history {
    /**
     * The hypothesized confidence for this interaction.
     * @interface
     */
    interface Confidence {
        'bin'?: v1.skill.history.ConfidenceBin;
    }
}
export declare namespace v1.skill.history {
    /**
     * Intent confidence bin for this utterance. * `HIGH`: Intent was recognized with high confidence. * `MEDIUM`: Intent was recognized with medium confidence. * `LOW`: Intent was recognized with low confidence. Note: Low confidence intents are not sent to the skill.
     * @enum
     */
    type ConfidenceBin = 'HIGH' | 'MEDIUM' | 'LOW';
}
export declare namespace v1.skill.history {
    /**
     * The dialog act used in the interaction.
     * @interface
     */
    interface DialogAct {
        'name'?: v1.skill.history.DialogActName;
    }
}
export declare namespace v1.skill.history {
    /**
     * Dialog act directive name. * `Dialog.ElicitSlot`: Alexa asked the user for the value of a specific slot. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#elicitslot) * `Dialog.ConfirmSlot`: Alexa confirmed the value of a specific slot before continuing with the dialog. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmslot) * `Dialog.ConfirmIntent`: Alexa confirmed the all the information the user has provided for the intent before the skill took action. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmintent)
     * @enum
     */
    type DialogActName = 'Dialog.ElicitSlot' | 'Dialog.ConfirmSlot' | 'Dialog.ConfirmIntent';
}
export declare namespace v1.skill.history {
    /**
     * Provides the intent name, slots and confidence of the intent used in this interaction.
     * @interface
     */
    interface Intent {
        'name'?: string;
        'confidence'?: v1.skill.history.Confidence;
        'slots'?: {
            [key: string]: v1.skill.history.Slot;
        };
    }
}
export declare namespace v1.skill.history {
    /**
     * A filter used to retrieve items where the intent confidence bin is equal to the given value. * `HIGH`: Intent was recognized with high confidence. * `MEDIUM`: Intent was recognized with medium confidence. * `LOW`: Intent was recognized with low confidence. Note: Low confidence intents are not sent to the skill.
     * @enum
     */
    type IntentConfidenceBin = 'HIGH' | 'MEDIUM' | 'LOW';
}
export declare namespace v1.skill.history {
    /**
     *
     * @interface
     */
    interface IntentRequest {
        'dialogAct'?: v1.skill.history.DialogAct;
        'intent'?: v1.skill.history.Intent;
        'interactionType'?: v1.skill.history.InteractionType;
        'locale'?: v1.skill.history.IntentRequestLocales;
        'publicationStatus'?: v1.skill.history.PublicationStatus;
        'stage'?: v1.StageType;
        'utteranceText'?: string;
    }
}
export declare namespace v1.skill.history {
    /**
     * Skill locale in which this interaction occurred.
     * @enum
     */
    type IntentRequestLocales = 'en-US' | 'en-GB' | 'en-IN' | 'en-CA' | 'en-AU' | 'de-DE' | 'ja-JP';
}
export declare namespace v1.skill.history {
    /**
     * Response to the GET Intent Request History API. It contains the collection of utterances for the skill, nextToken and other metadata related to the search query.
     * @interface
     */
    interface IntentRequests {
        '_links'?: v1.Links;
        'nextToken'?: string;
        'isTruncated'?: boolean;
        'totalCount'?: number;
        'startIndex'?: number;
        'skillId'?: string;
        'items'?: Array<v1.skill.history.IntentRequest>;
    }
}
export declare namespace v1.skill.history {
    /**
     * Indicates if the utterance was executed as a \"ONE_SHOT\" interaction or \"MODAL\" interaction. * `ONE_SHOT`: The user invokes the skill and states their intent in a single phrase. * `MODAL`: The user first invokes the skill and then states their intent.
     * @enum
     */
    type InteractionType = 'ONE_SHOT' | 'MODAL';
}
export declare namespace v1.skill.history {
    /**
     * The publication status of the skill when this interaction occurred
     * @enum
     */
    type PublicationStatus = 'Development' | 'Certification';
}
export declare namespace v1.skill.history {
    /**
     *
     * @interface
     */
    interface Slot {
        'name'?: string;
    }
}
export declare namespace v1.skill.history {
    /**
     * A filter used to retrieve items where the locale is equal to the given value.
     * @enum
     */
    type LocaleInQuery = 'en-US' | 'en-GB' | 'en-IN' | 'en-CA' | 'en-AU' | 'de-DE' | 'ja-JP';
}
export declare namespace v1.skill.history {
    /**
     *
     * @enum
     */
    type SortFieldForIntentRequestType = 'recordCount' | 'intent.name' | 'intent.confidence.bin' | 'stage' | 'dialogAct.name' | 'locale' | 'utteranceText' | 'publicationStatus' | 'interactionType';
}
export declare namespace v1.skill {
    /**
     * Set of properties of the image provided by the customer.
     * @interface
     */
    interface ImageAttributes {
        'dimension'?: v1.skill.ImageDimension;
        'size'?: v1.skill.ImageSize;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Enumerates delegation strategies used to control automatic dialog management through the defined dialog model. When no delegation strategies are defined, the value SKILL_RESPONSE is assumed.
     * @enum
     */
    type DelegationStrategyType = 'ALWAYS' | 'SKILL_RESPONSE';
}
export declare namespace v1.skill.interactionModel {
    /**
     * Defines dialog rules e.g. slot elicitation and validation, intent chaining etc.
     * @interface
     */
    interface Dialog {
        'delegationStrategy'?: v1.skill.interactionModel.DelegationStrategyType;
        'intents'?: Array<v1.skill.interactionModel.DialogIntents>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     *
     * @interface
     */
    interface DialogIntents {
        'name'?: string;
        'delegationStrategy'?: v1.skill.interactionModel.DelegationStrategyType;
        'slots'?: Array<v1.skill.interactionModel.DialogSlotItems>;
        'confirmationRequired'?: boolean;
        'prompts'?: v1.skill.interactionModel.DialogIntentsPrompts;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Collection of prompts for this intent.
     * @interface
     */
    interface DialogIntentsPrompts {
        'elicitation'?: string;
        'confirmation'?: string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Dialog prompts associated with this slot i.e. for elicitation and/or confirmation.
     * @interface
     */
    interface DialogPrompts {
        'elicitation'?: string;
        'confirmation'?: string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     *
     * @interface
     */
    interface DialogSlotItems {
        'name'?: string;
        'type'?: string;
        'elicitationRequired'?: boolean;
        'confirmationRequired'?: boolean;
        'prompts'?: v1.skill.interactionModel.DialogPrompts;
        'validations'?: Array<v1.skill.interactionModel.SlotValidation>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Denotes skill's sensitivity for out-of-domain utterances.
     * @interface
     */
    interface FallbackIntentSensitivity {
        'level'?: v1.skill.interactionModel.FallbackIntentSensitivityLevel;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Skill's sensitivity level for out-of-domain utterances. By default, the sensitivity level of the skill is set to ‘LOW’. As the sensitivity level for a skill is increased, more customer utterances that are not supported by the skill will be captured by AMAZON.FallbackIntent.
     * @enum
     */
    type FallbackIntentSensitivityLevel = 'HIGH' | 'MEDIUM' | 'LOW';
}
export declare namespace v1.skill.interactionModel {
    /**
     * The set of intents your service can accept and process.
     * @interface
     */
    interface Intent {
        'name'?: string;
        'slots'?: Array<v1.skill.interactionModel.SlotDefinition>;
        'samples'?: Array<string>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     *
     * @interface
     */
    interface InteractionModelData {
        'version'?: string;
        'description'?: string;
        'interactionModel'?: v1.skill.interactionModel.InteractionModelSchema;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     *
     * @interface
     */
    interface InteractionModelSchema {
        'languageModel'?: v1.skill.interactionModel.LanguageModel;
        'dialog'?: v1.skill.interactionModel.Dialog;
        'prompts'?: Array<v1.skill.interactionModel.Prompt>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Global configurations applicable to a skill's model.
     * @interface
     */
    interface ModelConfiguration {
        'fallbackIntentSensitivity'?: v1.skill.interactionModel.FallbackIntentSensitivity;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     *
     * @interface
     */
    interface Prompt {
        'id': string;
        'variations': Array<v1.skill.interactionModel.PromptItems>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     *
     * @interface
     */
    interface PromptItems {
        'type'?: v1.skill.interactionModel.PromptItemsType;
        'value'?: string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Prompt can be specified in different formats e.g. text, ssml.
     * @enum
     */
    type PromptItemsType = 'SSML' | 'PlainText';
}
export declare namespace v1.skill.interactionModel {
    /**
     * Slot definition.
     * @interface
     */
    interface SlotDefinition {
        'name'?: string;
        'type'?: string;
        'samples'?: Array<string>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Custom slot type to define a list of possible values for a slot. Used for items that are not covered by Amazon's built-in slot types.
     * @interface
     */
    interface SlotType {
        'name'?: string;
        'values'?: Array<v1.skill.interactionModel.TypeValue>;
        'valueSupplier'?: v1.skill.interactionModel.ValueSupplier;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validation on a slot with support for prompt and confirmation.
     * @interface
     */
    type SlotValidation = v1.skill.interactionModel.HasEntityResolutionMatch | v1.skill.interactionModel.IsLessThanOrEqualTo | v1.skill.interactionModel.IsGreaterThan | v1.skill.interactionModel.IsNotInSet | v1.skill.interactionModel.IsInDuration | v1.skill.interactionModel.IsLessThan | v1.skill.interactionModel.IsNotInDuration | v1.skill.interactionModel.IsGreaterThanOrEqualTo | v1.skill.interactionModel.IsInSet;
}
export declare namespace v1.skill.interactionModel {
    /**
     * The value schema in type object of interaction model.
     * @interface
     */
    interface TypeValue {
        'id'?: string;
        'name'?: v1.skill.interactionModel.TypeValueObject;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * The object that contains individual type values.
     * @interface
     */
    interface TypeValueObject {
        'value'?: string;
        'synonyms'?: Array<string>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Catalog reference to provide values.
     * @interface
     */
    interface ValueCatalog {
        'catalogId'?: string;
        'version'?: string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Supplier object to provide slot values.
     * @interface
     */
    type ValueSupplier = v1.skill.interactionModel.CatalogValueSupplier | v1.skill.interactionModel.InlineValueSupplier;
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Catalog request definitions.
     * @interface
     */
    interface CatalogDefinitionOutput {
        'catalog'?: v1.skill.interactionModel.catalog.CatalogEntity;
        'creationTime'?: string;
        'totalVersions'?: string;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Definition for catalog entity.
     * @interface
     */
    interface CatalogEntity {
        'name'?: string;
        'description'?: string;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Definition for catalog input.
     * @interface
     */
    interface CatalogInput {
        'name'?: string;
        'description'?: string;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Definition for catalog entity.
     * @interface
     */
    interface CatalogItem {
        'name'?: string;
        'description'?: string;
        'catalogId'?: string;
        '_links'?: v1.Links;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * CatalogId information.
     * @interface
     */
    interface CatalogResponse {
        'catalogId'?: string;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Defines the structure for catalog status response.
     * @interface
     */
    interface CatalogStatus {
        'lastUpdateRequest'?: v1.skill.interactionModel.catalog.LastUpdateRequest;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Status of last modification request for a resource.
     * @enum
     */
    type CatalogStatusType = 'FAILED' | 'IN_PROGRESS' | 'SUCCEEDED';
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Catalog request definitions.
     * @interface
     */
    interface DefinitionData {
        'catalog'?: v1.skill.interactionModel.catalog.CatalogInput;
        'vendorId'?: string;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Contains attributes related to last modification request of a resource.
     * @interface
     */
    interface LastUpdateRequest {
        'status'?: v1.skill.interactionModel.catalog.CatalogStatusType;
        'version'?: string;
        'errors'?: Array<v1.skill.StandardizedError>;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * List of catalog versions of a skill for the vendor.
     * @interface
     */
    interface ListCatalogResponse {
        '_links'?: v1.Links;
        'catalogs'?: Array<v1.skill.interactionModel.catalog.CatalogItem>;
        'isTruncated'?: boolean;
        'nextToken'?: string;
        'totalCount'?: number;
    }
}
export declare namespace v1.skill.interactionModel.catalog {
    /**
     * Catalog update request object.
     * @interface
     */
    interface UpdateRequest {
        'name': string;
        'description': string;
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     * The status of conflict detection job.
     * @enum
     */
    type ConflictDetectionJobStatus = 'IN_PROGRESS' | 'COMPLETED' | 'FAILED';
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     *
     * @interface
     */
    interface ConflictIntent {
        'name': string;
        'slots'?: v1.skill.interactionModel.conflictDetection.ConflictIntentSlots;
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     *
     * @interface
     */
    interface ConflictIntentSlot {
        'value'?: string;
        'type': string;
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     * List of conflict intent slots
     * @interface
     */
    interface ConflictIntentSlots {
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     *
     * @interface
     */
    interface ConflictResult {
        'sampleUtterance': string;
        'intent': v1.skill.interactionModel.conflictDetection.ConflictIntent;
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     *
     * @interface
     */
    interface GetConflictDetectionJobStatusResponse {
        'status': v1.skill.interactionModel.conflictDetection.ConflictDetectionJobStatus;
        'totalConflicts'?: number;
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     *
     * @interface
     */
    interface GetConflictsResponseResult {
        'conflictingUtterance': string;
        'conflicts': Array<v1.skill.interactionModel.conflictDetection.ConflictResult>;
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     *
     * @interface
     */
    interface PagedResponse {
        'paginationContext'?: v1.skill.interactionModel.conflictDetection.PaginationContext;
        '_links'?: v1.Links;
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     *
     * @interface
     */
    interface PaginationContext {
        'nextToken'?: string;
        'totalCount'?: number;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Define the language model.
     * @interface
     */
    interface LanguageModel {
        'invocationName'?: string;
        'types'?: Array<v1.skill.interactionModel.SlotType>;
        'intents'?: Array<v1.skill.interactionModel.Intent>;
        'modelConfiguration'?: v1.skill.interactionModel.ModelConfiguration;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * The body of the bad request exception.
     * @interface
     */
    interface BadRequest {
        'errors'?: Array<v1.skill.interactionModel.type.Error>;
        'warnings'?: Array<v1.skill.interactionModel.type.Warning>;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Slot type request definitions.
     * @interface
     */
    interface DefinitionData {
        'slotType'?: v1.skill.interactionModel.type.SlotTypeInput;
        'vendorId'?: string;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * The error which would fail requests.
     * @interface
     */
    interface Error {
        'code'?: string;
        'message'?: string;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Contains attributes related to last modification request of a resource.
     * @interface
     */
    interface LastUpdateRequest {
        'status'?: v1.skill.interactionModel.type.SlotTypeStatusType;
        'version'?: string;
        'errors'?: Array<v1.skill.interactionModel.type.Error>;
        'warnings'?: Array<v1.skill.interactionModel.type.Warning>;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * List of slot types of a skill for the vendor.
     * @interface
     */
    interface ListSlotTypeResponse {
        '_links'?: v1.Links;
        'slotTypes'?: Array<v1.skill.interactionModel.type.SlotTypeItem>;
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Slot Type request definitions.
     * @interface
     */
    interface SlotTypeDefinitionOutput {
        'slotType'?: v1.skill.interactionModel.type.SlotTypeInput;
        'totalVersions'?: string;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Definition for slot type input.
     * @interface
     */
    interface SlotTypeInput {
        'name'?: string;
        'description'?: string;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Definition for slot type entity.
     * @interface
     */
    interface SlotTypeItem {
        'name'?: string;
        'description'?: string;
        'id'?: string;
        '_links'?: v1.Links;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Slot Type information.
     * @interface
     */
    interface SlotTypeResponse {
        'slotType'?: v1.skill.interactionModel.type.SlotTypeResponseEntity;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * SlotTypeId information.
     * @interface
     */
    interface SlotTypeResponseEntity {
        'id'?: string;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Defines the structure for slot type status response.
     * @interface
     */
    interface SlotTypeStatus {
        'updateRequest'?: v1.skill.interactionModel.type.LastUpdateRequest;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Status of last modification request for a resource.
     * @enum
     */
    type SlotTypeStatusType = 'FAILED' | 'IN_PROGRESS' | 'SUCCEEDED';
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Slot type update definition object.
     * @interface
     */
    interface SlotTypeUpdateDefinition {
        'description': string;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * Slot type update request object.
     * @interface
     */
    interface UpdateRequest {
        'slotType'?: v1.skill.interactionModel.type.SlotTypeUpdateDefinition;
    }
}
export declare namespace v1.skill.interactionModel.type {
    /**
     * The warning which would not fail requests.
     * @interface
     */
    interface Warning {
        'code'?: string;
        'message'?: string;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * List of slot type versions of a skill for the vendor.
     * @interface
     */
    interface ListSlotTypeVersionResponse {
        '_links'?: v1.Links;
        'slotTypeVersions'?: Array<v1.skill.interactionModel.typeVersion.SlotTypeVersionItem>;
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * Slot Type version data with metadata.
     * @interface
     */
    interface SlotTypeVersionData {
        'slotType'?: v1.skill.interactionModel.typeVersion.SlotTypeVersionDataObject;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * Slot Type version fields with metadata.
     * @interface
     */
    interface SlotTypeVersionDataObject {
        'id'?: string;
        'definition'?: v1.skill.interactionModel.typeVersion.ValueSupplierObject;
        'description'?: string;
        'version'?: string;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * Definition for slot type entity.
     * @interface
     */
    interface SlotTypeVersionItem {
        'version'?: string;
        'description'?: string;
        '_links'?: v1.Links;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * Value supplier object for slot definition.
     * @interface
     */
    interface ValueSupplierObject {
        'valueSupplier'?: v1.skill.interactionModel.ValueSupplier;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * Slot Type version specific data.
     * @interface
     */
    interface VersionData {
        'slotType'?: v1.skill.interactionModel.typeVersion.VersionDataObject;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * Slot Type version fields with specific data.
     * @interface
     */
    interface VersionDataObject {
        'definition'?: v1.skill.interactionModel.typeVersion.ValueSupplierObject;
        'description'?: string;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * Slot Type update description wrapper.
     * @interface
     */
    interface SlotTypeUpdate {
        'slotType'?: v1.skill.interactionModel.typeVersion.SlotTypeUpdateObject;
    }
}
export declare namespace v1.skill.interactionModel.typeVersion {
    /**
     * Slot Type update description object.
     * @interface
     */
    interface SlotTypeUpdateObject {
        'description'?: string;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     * List of catalog values.
     * @interface
     */
    interface CatalogValues {
        'isTruncated'?: boolean;
        'nextToken'?: string;
        'totalCount'?: number;
        '_links'?: v1.Links;
        'values'?: Array<v1.skill.interactionModel.version.ValueSchema>;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     * Catalog version data with metadata.
     * @interface
     */
    interface CatalogVersionData {
        'source'?: v1.skill.interactionModel.version.InputSource;
        'description'?: string;
        'version'?: string;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     * Definition for catalog version input data.
     * @interface
     */
    interface InputSource {
        'type'?: string;
        'url'?: string;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     *
     * @interface
     */
    interface Links {
        'self'?: v1.Link;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     * List of interactionModel versions of a skill for the vendor
     * @interface
     */
    interface ListResponse {
        '_links'?: v1.Links;
        'skillModelVersions'?: Array<v1.skill.interactionModel.version.VersionItems>;
        'isTruncated'?: boolean;
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     * The value schema in type object of interaction model.
     * @interface
     */
    interface ValueSchema {
        'id'?: string;
        'name'?: v1.skill.interactionModel.version.ValueSchemaName;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     *
     * @interface
     */
    interface ValueSchemaName {
        'value'?: string;
        'synonyms'?: Array<string>;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     * Catalog version specific data.
     * @interface
     */
    interface VersionData {
        'source'?: v1.skill.interactionModel.version.InputSource;
        'description'?: string;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     * Version metadata about the entity.
     * @interface
     */
    interface VersionItems {
        'version'?: string;
        'creationTime'?: string;
        'description'?: string;
        '_links'?: v1.skill.interactionModel.version.Links;
    }
}
export declare namespace v1.skill.interactionModel.version {
    /**
     * Catalog update description object.
     * @interface
     */
    interface CatalogUpdate {
        'description'?: string;
    }
}
export declare namespace v1.skill.metrics {
    /**
     * Response object for the API call which contains metrics data.
     * @interface
     */
    interface GetMetricDataResponse {
        'metric': string;
        'timestamps': Array<string>;
        'values': Array<number>;
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.metrics {
    /**
     * A distinct set of logic which predictably returns a set of data.
     * @enum
     */
    type Metric = 'uniqueCustomers' | 'totalEnablements' | 'totalUtterances' | 'successfulUtterances' | 'failedUtterances' | 'totalSessions' | 'successfulSessions' | 'incompleteSessions' | 'userEndedSessions' | 'skillEndedSessions';
}
export declare namespace v1.skill.metrics {
    /**
     * The aggregation period to use when retrieving the metric, follows ISO_8601#Durations format.
     * @enum
     */
    type Period = 'SINGLE' | 'PT15M' | 'PT1H' | 'P1D';
}
export declare namespace v1.skill.metrics {
    /**
     * The type of the skill (custom, smartHome and flashBriefing).
     * @enum
     */
    type SkillType = 'custom' | 'smartHome' | 'flashBriefing';
}
export declare namespace v1.skill.metrics {
    /**
     * The stage of the skill (live, development).
     * @enum
     */
    type StageForMetric = 'live' | 'development';
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface AnnotationSetEntity {
        'locale'?: string;
        'name'?: string;
        'numberOfEntries'?: number;
        'updatedTimestamp'?: string;
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface CreateNLUAnnotationSetRequest {
        'locale'?: string;
        'name'?: string;
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface CreateNLUAnnotationSetResponse {
        'id'?: string;
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     * Links for the API navigation.
     * @interface
     */
    interface Links {
        'self'?: v1.Link;
        'next'?: v1.Link;
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface ListNLUAnnotationSetsResponse {
        'annotationSets'?: Array<v1.skill.nlu.annotationSets.AnnotationSet>;
        'paginationContext'?: v1.skill.nlu.annotationSets.PaginationContext;
        '_links'?: v1.skill.nlu.annotationSets.Links;
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface PaginationContext {
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface UpdateNLUAnnotationSetAnnotationsRequest {
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface UpdateNLUAnnotationSetPropertiesRequest {
        'name'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface Actual {
        'domain'?: string;
        'intent'?: v1.skill.nlu.evaluations.Intent;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     * An enumeration indicating whether the user has explicitly confirmed or denied the entire intent/slot. Possible values: 'NONE', 'CONFIRMED', 'DENIED'.
     * @enum
     */
    type ConfirmationStatus = 'NONE' | 'CONFIRMED' | 'DENIED';
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface EvaluateNLURequest {
        'stage': string;
        'locale': string;
        'source': v1.skill.nlu.evaluations.Source;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface EvaluateResponse {
        'id'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface EvaluationEntity {
        'startTimestamp'?: string;
        'endTimestamp'?: string;
        'status'?: v1.skill.nlu.evaluations.Status;
        'errorMessage'?: string;
        'inputs'?: v1.skill.nlu.evaluations.EvaluationInputs;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface EvaluationInputs {
        'locale'?: string;
        'stage'?: string;
        'source'?: v1.skill.nlu.evaluations.Source;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface Expected {
        'domain'?: string;
        'intent'?: v1.skill.nlu.evaluations.ExpectedIntent;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface ExpectedIntent {
        'name'?: string;
        'slots'?: {
            [key: string]: v1.skill.nlu.evaluations.ExpectedIntentSlotsProps;
        };
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface ExpectedIntentSlotsProps {
        'value'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface GetNLUEvaluationResponseLinks {
        'results'?: v1.skill.nlu.evaluations.Results;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface Inputs {
        'utterance'?: string;
        'referenceTimestamp'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface Intent {
        'name'?: string;
        'confirmationStatus'?: v1.skill.nlu.evaluations.ConfirmationStatus;
        'slots'?: {
            [key: string]: v1.skill.nlu.evaluations.SlotsProps;
        };
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     * Links for the API navigation.
     * @interface
     */
    interface Links {
        'self'?: v1.Link;
        'next'?: v1.Link;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface PagedResponse {
        'paginationContext'?: v1.skill.nlu.evaluations.PaginationContext;
        '_links'?: v1.skill.nlu.evaluations.Links;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface PagedResultsResponse {
        'paginationContext'?: v1.skill.nlu.evaluations.PagedResultsResponsePaginationContext;
        '_links'?: v1.skill.nlu.evaluations.Links;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface PagedResultsResponsePaginationContext {
        'nextToken'?: string;
        'totalCount'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface PaginationContext {
        'nextToken'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     * A resolutions object representing the results of resolving the words captured from the user's utterance.
     * @interface
     */
    interface Resolutions {
        'resolutionsPerAuthority'?: Array<v1.skill.nlu.evaluations.ResolutionsPerAuthority>;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface ResolutionsPerAuthority {
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface Results {
        'href'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @enum
     */
    type ResultsStatus = 'PASSED' | 'FAILED';
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface SlotsProps {
        'name'?: string;
        'value'?: string;
        'confirmationStatus'?: v1.skill.nlu.evaluations.ConfirmationStatus;
        'resolutions'?: v1.skill.nlu.evaluations.Resolutions;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     * Use Annotation Set as evaluation source
     * @interface
     */
    interface Source {
        'annotationId'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @enum
     */
    type Status = 'PASSED' | 'FAILED' | 'IN_PROGRESS' | 'ERROR';
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface TestCase {
        'status'?: v1.skill.nlu.evaluations.ResultsStatus;
        'inputs'?: v1.skill.nlu.evaluations.Inputs;
        'actual'?: v1.skill.nlu.evaluations.Actual;
        'expected'?: Array<v1.skill.nlu.evaluations.Expected>;
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface AlexaExecutionInfo {
        'alexaResponses'?: Array<v1.skill.simulations.AlexaResponse>;
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface AlexaResponse {
        'type'?: string;
        'content'?: v1.skill.simulations.AlexaResponseContent;
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface AlexaResponseContent {
        'caption'?: string;
    }
}
export declare namespace v1.skill.simulations {
    /**
     * Model of a virtual device used for simulation. This device object emulates attributes associated with a real Alexa enabled device.
     * @interface
     */
    interface Device {
        'locale': string;
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface Input {
        'content': string;
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface Invocation {
        'invocationRequest'?: v1.skill.simulations.InvocationRequest;
        'invocationResponse'?: v1.skill.simulations.InvocationResponse;
        'metrics'?: v1.skill.simulations.Metrics;
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface InvocationRequest {
        'endpoint'?: string;
        'body'?: {
            [key: string]: any;
        };
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface InvocationResponse {
        'body'?: {
            [key: string]: any;
        };
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface Metrics {
        'skillExecutionTimeInMilliseconds'?: number;
    }
}
export declare namespace v1.skill.simulations {
    /**
     * Session settings for running current simulation.
     * @interface
     */
    interface Session {
        'mode'?: v1.skill.simulations.SessionMode;
    }
}
export declare namespace v1.skill.simulations {
    /**
     * Indicate the session mode of the current simulation is using.
     * @enum
     */
    type SessionMode = 'DEFAULT' | 'FORCE_NEW_SESSION';
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface SimulationResult {
        'alexaExecutionInfo'?: v1.skill.simulations.AlexaExecutionInfo;
        'skillExecutionInfo'?: v1.skill.simulations.Invocation;
        'error'?: v1.Error;
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface SimulationsApiRequest {
        'input': v1.skill.simulations.Input;
        'device': v1.skill.simulations.Device;
        'session'?: v1.skill.simulations.Session;
    }
}
export declare namespace v1.skill.simulations {
    /**
     *
     * @interface
     */
    interface SimulationsApiResponse {
        'id'?: string;
        'status'?: v1.skill.simulations.SimulationsApiResponseStatus;
        'result'?: v1.skill.simulations.SimulationResult;
    }
}
export declare namespace v1.skill.simulations {
    /**
     * String that specifies the current status of the simulation. Possible values are \"IN_PROGRESS\", \"SUCCESSFUL\", and \"FAILED\".
     * @enum
     */
    type SimulationsApiResponseStatus = 'IN_PROGRESS' | 'SUCCESSFUL' | 'FAILED';
}
export declare namespace v1.skill {
    /**
     *
     * @enum
     */
    type SkillResourcesEnum = 'manifest' | 'interactionModel' | 'hostedSkillDeployment' | 'hostedSkillProvisioning';
}
export declare namespace v1.skill {
    /**
     * List of standardized error codes
     * @enum
     */
    type StandardizedErrorCode = 'INVALID_DATA_TYPE' | 'RESOURCE_NOT_FOUND' | 'INVALID_CONTENT_TYPE' | 'INVALID_IMAGE_ATTRIBUTES' | 'DENIED_FEATURE_ACCESS' | 'INVALID_URL_DOMAIN' | 'INVALID_URL_FORMAT' | 'UNEXPECTED_PROPERTY' | 'MISSING_REQUIRED_PROPERTY' | 'UNEXPECTED_EMPTY_OBJECT' | 'INVALID_ARRAY_SIZE' | 'DUPLICATE_ARRAY_ITEMS' | 'INVALID_INTEGER_VALUE' | 'INVALID_STRING_LENGTH' | 'INVALID_ENUM_VALUE' | 'INVALID_STRING_PATTERN' | 'INCONSISTENT_ENDPOINTS' | 'MUTUALLY_EXCLUSIVE_ARRAY_ITEMS' | 'EXPECTED_RELATED_INSTANCE' | 'CONFLICTING_INSTANCES' | 'EXPECTED_COMPLIANCE_AGREEMENT';
}
export declare namespace v1.skill {
    /**
     *
     * @interface
     */
    interface UpdateSkillWithPackageRequest {
        'location'?: string;
    }
}
export declare namespace v1.skill {
    /**
     * Standardized, machine readable structure that wraps all the information about a specific occurrence of an error of the type specified by the code.
     * @interface
     */
    interface ValidationDetails {
        'actualImageAttributes'?: v1.skill.ImageAttributes;
        'actualNumberOfItems'?: number;
        'actualStringLength'?: number;
        'allowedContentTypes'?: Array<string>;
        'allowedDataTypes'?: Array<v1.skill.ValidationDataTypes>;
        'allowedImageAttributes'?: Array<v1.skill.ImageAttributes>;
        'conflictingInstance'?: v1.skill.Instance;
        'expectedInstance'?: v1.skill.Instance;
        'expectedRegexPattern'?: string;
        'agreementType'?: v1.skill.AgreementType;
        'feature'?: v1.skill.ValidationFeature;
        'inconsistentEndpoint'?: v1.skill.ValidationEndpoint;
        'minimumIntegerValue'?: number;
        'minimumNumberOfItems'?: number;
        'minimumStringLength'?: number;
        'maximumIntegerValue'?: number;
        'maximumNumberOfItems'?: number;
        'maximumStringLength'?: number;
        'originalEndpoint'?: v1.skill.ValidationEndpoint;
        'originalInstance'?: v1.skill.Instance;
        'requiredProperty'?: string;
        'unexpectedProperty'?: string;
    }
}
export declare namespace v1.skill.validations {
    /**
     *
     * @interface
     */
    interface ResponseValidation {
        'title'?: string;
        'description'?: string;
        'category'?: string;
        'locale'?: string;
        'importance'?: v1.skill.validations.ResponseValidationImportance;
        'status'?: v1.skill.validations.ResponseValidationStatus;
    }
}
export declare namespace v1.skill.validations {
    /**
     * String that specifies importance of the validation. Possible values are \"REQUIRED\" and \"RECOMMENDED\"
     * @enum
     */
    type ResponseValidationImportance = 'REQUIRED' | 'RECOMMENDED';
}
export declare namespace v1.skill.validations {
    /**
     * String that specifies status of the validation. Possible values are \"SUCCESSFUL\" and \"FAILED\"
     * @enum
     */
    type ResponseValidationStatus = 'SUCCESSFUL' | 'FAILED';
}
export declare namespace v1.skill.validations {
    /**
     *
     * @interface
     */
    interface ValidationsApiRequest {
        'locales'?: Array<string>;
    }
}
export declare namespace v1.skill.validations {
    /**
     *
     * @interface
     */
    interface ValidationsApiResponse {
        'id'?: string;
        'status'?: v1.skill.validations.ValidationsApiResponseStatus;
        'result'?: v1.skill.validations.ValidationsApiResponseResult;
    }
}
export declare namespace v1.skill.validations {
    /**
     *
     * @interface
     */
    interface ValidationsApiResponseResult {
        'validations'?: Array<v1.skill.validations.ResponseValidation>;
        'error'?: v1.Error;
    }
}
export declare namespace v1.skill.validations {
    /**
     * String that specifies the current status of validation execution. Possible values are \"IN_PROGRESS\", \"SUCCESSFUL\", and \"FAILED\".
     * @enum
     */
    type ValidationsApiResponseStatus = 'IN_PROGRESS' | 'SUCCESSFUL' | 'FAILED';
}
export declare namespace v1.vendorManagement {
    /**
     * Vendor Response Object.
     * @interface
     */
    interface Vendor {
        'name'?: string;
        'id'?: string;
        'roles'?: Array<string>;
    }
}
export declare namespace v1.vendorManagement {
    /**
     * List of Vendors.
     * @interface
     */
    interface Vendors {
        'vendors'?: Array<v1.vendorManagement.Vendor>;
    }
}
export declare namespace v2 {
    /**
     *
     * @interface
     */
    interface BadRequestError {
        'message'?: string;
        'violations'?: Array<v2.Error>;
    }
}
export declare namespace v2 {
    /**
     *
     * @interface
     */
    interface Error {
        'code'?: string;
        'message': string;
    }
}
export declare namespace v2.skill {
    /**
     *
     * @interface
     */
    interface Invocation {
        'invocationRequest'?: v2.skill.InvocationRequest;
        'invocationResponse'?: v2.skill.InvocationResponse;
        'metrics'?: v2.skill.Metrics;
    }
}
export declare namespace v2.skill {
    /**
     *
     * @interface
     */
    interface InvocationRequest {
        'endpoint'?: string;
        'body'?: {
            [key: string]: any;
        };
    }
}
export declare namespace v2.skill {
    /**
     *
     * @interface
     */
    interface InvocationResponse {
        'body'?: {
            [key: string]: any;
        };
    }
}
export declare namespace v2.skill {
    /**
     *
     * @interface
     */
    interface Metrics {
        'skillExecutionTimeInMilliseconds'?: number;
    }
}
export declare namespace v2.skill.invocations {
    /**
     * Region of endpoint to be called.
     * @enum
     */
    type EndPointRegions = 'NA' | 'EU' | 'FE';
}
export declare namespace v2.skill.invocations {
    /**
     *
     * @interface
     */
    interface InvocationResponseResult {
        'skillExecutionInfo'?: v2.skill.Invocation;
        'error'?: v2.Error;
    }
}
export declare namespace v2.skill.invocations {
    /**
     * String that specifies the status of skill invocation. Possible values are \"SUCCEEDED\", and \"FAILED\".
     * @enum
     */
    type InvocationResponseStatus = 'SUCCEEDED' | 'FAILED';
}
export declare namespace v2.skill.invocations {
    /**
     *
     * @interface
     */
    interface InvocationsApiResponse {
        'status'?: v2.skill.invocations.InvocationResponseStatus;
        'result'?: v2.skill.invocations.InvocationResponseResult;
    }
}
export declare namespace v2.skill.invocations {
    /**
     *
     * @interface
     */
    interface SkillRequest {
        'body': any;
    }
}
export declare namespace v2.skill.invocations {
    /**
     *
     * @interface
     */
    interface InvocationsApiRequest {
        'endpointRegion': v2.skill.invocations.EndPointRegions;
        'skillRequest': v2.skill.invocations.SkillRequest;
    }
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface AlexaExecutionInfo {
        'alexaResponses'?: Array<v2.skill.simulations.AlexaResponse>;
        'consideredIntents'?: Array<v2.skill.simulations.Intent>;
    }
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface AlexaResponse {
        'type'?: string;
        'content'?: v2.skill.simulations.AlexaResponseContent;
    }
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface AlexaResponseContent {
        'caption'?: string;
    }
}
export declare namespace v2.skill.simulations {
    /**
     * An enumeration indicating whether the user has explicitly confirmed or denied the entire intent. Possible values: \"NONE\", \"CONFIRMED\", \"DENIED\".
     * @enum
     */
    type ConfirmationStatusType = 'NONE' | 'CONFIRMED' | 'DENIED';
}
export declare namespace v2.skill.simulations {
    /**
     * Model of a virtual device used for simulation. This device object emulates attributes associated with a real Alexa enabled device.
     * @interface
     */
    interface Device {
        'locale': string;
    }
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface Input {
        'content': string;
    }
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface Intent {
        'name'?: string;
        'confirmationStatus'?: v2.skill.simulations.ConfirmationStatusType;
        'slots'?: {
            [key: string]: v2.skill.simulations.Slot;
        };
    }
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface ResolutionsPerAuthorityItems {
        'authority'?: string;
        'status'?: v2.skill.simulations.ResolutionsPerAuthorityStatus;
        'values'?: Array<v2.skill.simulations.ResolutionsPerAuthorityValueItems>;
    }
}
export declare namespace v2.skill.simulations {
    /**
     * An object representing the status of entity resolution for the slot.
     * @interface
     */
    interface ResolutionsPerAuthorityStatus {
        'code'?: v2.skill.simulations.ResolutionsPerAuthorityStatusCode;
    }
}
export declare namespace v2.skill.simulations {
    /**
     * A code indicating the results of attempting to resolve the user utterance against the defined slot types. This can be one of the following: ER_SUCCESS_MATCH: The spoken value matched a value or synonym explicitly defined in your custom slot type. ER_SUCCESS_NO_MATCH: The spoken value did not match any values or synonyms explicitly defined in your custom slot type. ER_ERROR_TIMEOUT: An error occurred due to a timeout. ER_ERROR_EXCEPTION: An error occurred due to an exception during processing.
     * @enum
     */
    type ResolutionsPerAuthorityStatusCode = 'ER_SUCCESS_MATCH' | 'ER_SUCCESS_NO_MATCH' | 'ER_ERROR_TIMEOUT' | 'ER_ERROR_EXCEPTION';
}
export declare namespace v2.skill.simulations {
    /**
     * An object representing the resolved value for the slot, based on the user's utterance and the slot type definition.
     * @interface
     */
    interface ResolutionsPerAuthorityValueItems {
        'name'?: string;
        'id'?: string;
    }
}
export declare namespace v2.skill.simulations {
    /**
     * Session settings for running current simulation.
     * @interface
     */
    interface Session {
        'mode'?: v2.skill.simulations.SessionMode;
    }
}
export declare namespace v2.skill.simulations {
    /**
     * Indicate the session mode of the current simulation is using.
     * @enum
     */
    type SessionMode = 'DEFAULT' | 'FORCE_NEW_SESSION';
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface SimulationResult {
        'alexaExecutionInfo'?: v2.skill.simulations.AlexaExecutionInfo;
        'skillExecutionInfo'?: v2.skill.Invocation;
        'error'?: v2.Error;
    }
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface SimulationsApiRequest {
        'input': v2.skill.simulations.Input;
        'device': v2.skill.simulations.Device;
        'session'?: v2.skill.simulations.Session;
    }
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface SimulationsApiResponse {
        'id'?: string;
        'status'?: v2.skill.simulations.SimulationsApiResponseStatus;
        'result'?: v2.skill.simulations.SimulationResult;
    }
}
export declare namespace v2.skill.simulations {
    /**
     * String that specifies the current status of the simulation. Possible values are \"IN_PROGRESS\", \"SUCCESSFUL\", and \"FAILED\".
     * @enum
     */
    type SimulationsApiResponseStatus = 'IN_PROGRESS' | 'SUCCESSFUL' | 'FAILED';
}
export declare namespace v2.skill.simulations {
    /**
     *
     * @interface
     */
    interface Slot {
        'name'?: string;
        'value'?: string;
        'confirmationStatus'?: v2.skill.simulations.ConfirmationStatusType;
        'resolutions'?: v2.skill.simulations.SlotResolutions;
    }
}
export declare namespace v2.skill.simulations {
    /**
     * A resolutions object representing the results of resolving the words captured from the user's utterance.
     * @interface
     */
    interface SlotResolutions {
        'resolutionsPerAuthority'?: Array<v2.skill.simulations.ResolutionsPerAuthorityItems>;
    }
}
export declare namespace v0.catalog.upload {
    /**
     * Request body for self-hosted catalog uploads.
     * @interface
     */
    interface CreateContentUploadResponse {
        'id'?: string;
        'catalogId'?: string;
        'status'?: v0.catalog.upload.UploadStatus;
        'createdDate'?: string;
        'lastUpdatedDate'?: string;
        'ingestionSteps'?: Array<v0.catalog.upload.UploadIngestionStep>;
        'presignedUploadParts'?: Array<v0.catalog.upload.PresignedUploadPart>;
    }
}
export declare namespace v0.catalog.upload {
    /**
     * Response object for get content upload request.
     * @interface
     */
    interface GetContentUploadResponse {
        'id'?: string;
        'catalogId'?: string;
        'status'?: v0.catalog.upload.UploadStatus;
        'createdDate'?: string;
        'lastUpdatedDate'?: string;
        'file'?: v0.catalog.upload.ContentUploadFileSummary;
        'ingestionSteps'?: Array<v0.catalog.upload.UploadIngestionStep>;
    }
}
export declare namespace v0.developmentEvents.subscriber {
    /**
     * Authorization for accessing AWS SNS endpoint.
     * @interface
     */
    interface EndpointAwsAuthorization {
        'type': 'AWS_IAM';
        'arn'?: string;
    }
}
export declare namespace v0.eventSchema.AlexaDevelopmentEvent {
    /**
     * 'AlexaDevelopmentEvent.InteractionModelUpdate' event represents the status of set/update interaction model request. The update request may complete either with `SUCCEEDED` or `FAILED` status.
     * @interface
     */
    interface InteractionModelUpdate {
        'eventName': 'AlexaDevelopmentEvent.InteractionModelUpdate';
        'timestamp'?: string;
        'requestId'?: string;
        'payload'?: v0.eventSchema.InteractionModelEventAttributes;
    }
}
export declare namespace v0.eventSchema.AlexaDevelopmentEvent {
    /**
     * 'AlexaDevelopmentEvent.ManifestUpdate' event represents the status of the update request on the Manifest. This event is generated when request to create a skill or update an existing skill is completed. The request may complete either with `SUCCEEDED` or `FAILED` status.
     * @interface
     */
    interface ManifestUpdate {
        'eventName': 'AlexaDevelopmentEvent.ManifestUpdate';
        'timestamp'?: string;
        'requestId'?: string;
        'payload'?: v0.eventSchema.SkillEventAttributes;
    }
}
export declare namespace v0.eventSchema.AlexaDevelopmentEvent {
    /**
     * 'AlexaDevelopmentEvent.SkillCertification' event represents the status of various validations of `certification workflow`. This step may complete either with `SUCCEEDED` or `FAILED` status.
     * @interface
     */
    interface SkillCertification {
        'eventName': 'AlexaDevelopmentEvent.SkillCertification';
        'timestamp'?: string;
        'requestId'?: string;
        'payload'?: v0.eventSchema.SkillEventAttributes;
    }
}
export declare namespace v0.eventSchema.AlexaDevelopmentEvent {
    /**
     * 'AlexaDevelopmentEvent.SkillPublish' event represents the status of publish to live operation. When a developer submits a skill for certification, it goes through `certification workflow` followed by publish to live workflow. This event is generated in publish workflow and may complete either with `SUCCEEDED` or `FAILED` status. If 'SUCCEEDED', users can see and enable latest version of the skill via Alexa Skill Store.
     * @interface
     */
    interface SkillPublish {
        'eventName': 'AlexaDevelopmentEvent.SkillPublish';
        'timestamp'?: string;
        'requestId'?: string;
        'payload'?: v0.eventSchema.SkillEventAttributes;
    }
}
export declare namespace v0.eventSchema {
    /**
     * Represents a set of attributes specific to interaction model of an Alexa Skill.
     * @interface
     */
    interface InteractionModelAttributes {
        'skillId'?: string;
        'vendorId'?: string;
    }
}
export declare namespace v1.catalog.upload {
    /**
     * Request body for self-hosted catalog uploads
     * @interface
     */
    interface Location {
        'location'?: string;
    }
}
export declare namespace v1.catalog.upload {
    /**
     * Request body for self-hosted catalog uploads
     * @interface
     */
    interface PreSignedUrl {
        'urlId': string;
        'partETags'?: Array<v1.catalog.upload.PreSignedUrlItem>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Used to declare that the skill uses the Alexa.Presentation.APL interface.
     * @interface
     */
    interface AlexaPresentationAplInterface {
        'type': 'ALEXA_PRESENTATION_APL';
        'supportedViewports'?: Array<v1.skill.Manifest.ViewportSpecification>;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Used to declare that the skill uses the Alexa.Presentation.HTML interface.
     * @interface
     */
    interface AlexaPresentationHtmlInterface {
        'type': 'ALEXA_PRESENTATION_HTML';
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface AudioInterface {
        'type': 'AUDIO_PLAYER';
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Skills using Custom Interfaces can send custom directives and receive custom events from custom endpoints such as Alexa gadgets.
     * @interface
     */
    interface CustomInterface {
        'type': 'CUSTOM_INTERFACE';
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Used to declare that the skill uses the Display interface. When a skill declares that it uses the Display interface the Display interface will be passed in the supportedInterfaces section of devices which meet any of the required minimum version attributes specified in the manifest. If the device does not meet any of the minimum versions specified in the manifest the Display interface will not be present in the supportedInterfaces section. If neither the minimumTemplateVersion nor the minimumApmlVersion attributes are specified in the manifes then the minimumTemplateVersion is defaulted to 1.0 and apmlVersion is omitted.
     * @interface
     */
    interface DisplayInterface {
        'type': 'RENDER_TEMPLATE';
        'minimumTemplateVersion'?: v1.skill.Manifest.DisplayInterfaceTemplateVersion;
        'minimumApmlVersion'?: v1.skill.Manifest.DisplayInterfaceApmlVersion;
    }
}
export declare namespace v1.skill.Manifest {
    /**
     * Skills using Gadget Controller can send directives to Echo Buttons. This is a legacy interface specific to Echo Buttons.
     * @interface
     */
    interface GadgetControllerInterface {
        'type': 'GADGET_CONTROLLER';
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface GameEngineInterface {
        'type': 'GAME_ENGINE';
    }
}
export declare namespace v1.skill.Manifest {
    /**
     *
     * @interface
     */
    interface VideoAppInterface {
        'type': 'VIDEO_APP';
    }
}
export declare namespace v1.skill.evaluations {
    /**
     * The intent that Alexa selected for the utterance in the request.
     * @interface
     */
    interface ProfileNluSelectedIntent {
        'name'?: string;
        'confirmationStatus'?: v1.skill.evaluations.ConfirmationStatusType;
        'slots'?: {
            [key: string]: v1.skill.evaluations.Slot;
        };
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Supply slot values from catalog(s).
     * @interface
     */
    interface CatalogValueSupplier {
        'type': 'CatalogValueSupplier';
        'valueCatalog'?: v1.skill.interactionModel.ValueCatalog;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * The hasEntityResolutionMatch would allow Alexa to trigger a re-prompt when the status produced by ER is \"ER_SUCCESS_NO_MATCH\".
     * @interface
     */
    interface HasEntityResolutionMatch {
        'type': 'hasEntityResolutionMatch';
        'prompt': string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Supplies inline slot type values.
     * @interface
     */
    interface InlineValueSupplier {
        'type': 'InlineValueSupplier';
        'values'?: Array<v1.skill.interactionModel.TypeValue>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validates that slot value is greater than the specified value.
     * @interface
     */
    interface IsGreaterThan {
        'type': 'isGreaterThan';
        'prompt': string;
        'value': string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validates that slot value is greater than or equals to the specified value.
     * @interface
     */
    interface IsGreaterThanOrEqualTo {
        'type': 'isGreaterThanOrEqualTo';
        'prompt': string;
        'value': string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validates that the given date or time (as a slot value) is in a given interval. Unlike other range validations, duration based validations lets the developer define a dynamic range of date or time using ISO_8601 Duration Format. Based on the given 'start' and 'end' parameters an interval is created. The slot value given by the skill's user at runtime is then validated inside this interval. Both 'start' and 'end' parameters are in reference to the current date/time. Here the current date/time refers to the date/time when the skill's user made the request.
     * @interface
     */
    interface IsInDuration {
        'type': 'isInDuration';
        'prompt': string;
        'start'?: string;
        'end'?: string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validates if the slot is in the specified set of values.
     * @interface
     */
    interface IsInSet {
        'type': 'isInSet';
        'prompt': string;
        'values': Array<string>;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validates that slot value is less than or equals to the specified value.
     * @interface
     */
    interface IsLessThan {
        'type': 'isLessThan';
        'prompt': string;
        'value': string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validates that slot value is less than or equals to the specified value.
     * @interface
     */
    interface IsLessThanOrEqualTo {
        'type': 'isLessThanOrEqualTo';
        'prompt': string;
        'value': string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validates that the given date or time (as a slot value) is not in a given interval. Unlike other range validations, duration based validations lets the developer define a dynamic range of date or time using ISO_8601 Duration Format. Based on the given 'start' and 'end' parameters an interval is created. The slot value given by the skill's user at runtime is then validated inside this interval. Both 'start' and 'end' parameters are in reference to the current date/time. Here the current date/time refers to the date/time when the skill's user made the request.
     * @interface
     */
    interface IsNotInDuration {
        'type': 'isNotInDuration';
        'prompt': string;
        'start'?: string;
        'end'?: string;
    }
}
export declare namespace v1.skill.interactionModel {
    /**
     * Validates if the slot is not in the specified set of values.
     * @interface
     */
    interface IsNotInSet {
        'type': 'isNotInSet';
        'prompt': string;
        'values': Array<string>;
    }
}
export declare namespace v1.skill.interactionModel.conflictDetection {
    /**
     *
     * @interface
     */
    interface GetConflictsResponse {
        'paginationContext'?: v1.skill.interactionModel.conflictDetection.PaginationContext;
        '_links'?: v1.Links;
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface AnnotationSet {
        'locale'?: string;
        'name'?: string;
        'numberOfEntries'?: number;
        'updatedTimestamp'?: string;
        'annotationId'?: string;
    }
}
export declare namespace v1.skill.nlu.annotationSets {
    /**
     *
     * @interface
     */
    interface GetNLUAnnotationSetPropertiesResponse {
        'locale'?: string;
        'name'?: string;
        'numberOfEntries'?: number;
        'updatedTimestamp'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface Evaluation {
        'startTimestamp'?: string;
        'endTimestamp'?: string;
        'status'?: v1.skill.nlu.evaluations.Status;
        'errorMessage'?: string;
        'inputs'?: v1.skill.nlu.evaluations.EvaluationInputs;
        'id'?: string;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface GetNLUEvaluationResponse {
        'startTimestamp'?: string;
        'endTimestamp'?: string;
        'status'?: v1.skill.nlu.evaluations.Status;
        'errorMessage'?: string;
        'inputs'?: v1.skill.nlu.evaluations.EvaluationInputs;
        '_links'?: v1.skill.nlu.evaluations.GetNLUEvaluationResponseLinks;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     *
     * @interface
     */
    interface GetNLUEvaluationResultsResponse {
        'paginationContext'?: v1.skill.nlu.evaluations.PagedResultsResponsePaginationContext;
        '_links'?: v1.skill.nlu.evaluations.Links;
        'totalFailed'?: number;
        'testCases'?: Array<v1.skill.nlu.evaluations.TestCase>;
    }
}
export declare namespace v1.skill.nlu.evaluations {
    /**
     * response body for a list evaluation API
     * @interface
     */
    interface ListNLUEvaluationsResponse {
        'paginationContext'?: v1.skill.nlu.evaluations.PaginationContext;
        '_links'?: v1.skill.nlu.evaluations.Links;
        'evaluations'?: Array<v1.skill.nlu.evaluations.Evaluation>;
    }
}
export declare namespace services.skillManagement {
    /**
     *
     */
    class SkillManagementServiceClient extends BaseServiceClient {
        private lwaServiceClient;
        private userAgent;
        constructor(apiConfiguration: ApiConfiguration, authenticationConfiguration: AuthenticationConfiguration, customUserAgent?: string);
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         */
        callGetCatalogV0(catalogId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         */
        getCatalogV0(catalogId: string): Promise<v0.catalog.CatalogDetails>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callListUploadsForCatalogV0(catalogId: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        listUploadsForCatalogV0(catalogId: string, nextToken?: string, maxResults?: number): Promise<v0.catalog.upload.ListUploadsResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v0.catalog.upload.CreateContentUploadRequest} createContentUploadRequest Defines the request body for updateCatalog API.
         */
        callCreateContentUploadV0(catalogId: string, createContentUploadRequest: v0.catalog.upload.CreateContentUploadRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v0.catalog.upload.CreateContentUploadRequest} createContentUploadRequest Defines the request body for updateCatalog API.
         */
        createContentUploadV0(catalogId: string, createContentUploadRequest: v0.catalog.upload.CreateContentUploadRequest): Promise<v0.catalog.upload.CreateContentUploadResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} uploadId Unique identifier of the upload
         */
        callGetContentUploadByIdV0(catalogId: string, uploadId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} uploadId Unique identifier of the upload
         */
        getContentUploadByIdV0(catalogId: string, uploadId: string): Promise<v0.catalog.upload.GetContentUploadResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} uploadId Unique identifier of the upload
         * @param {v0.catalog.upload.CompleteUploadRequest} completeUploadRequestPayload Request payload to complete an upload.
         */
        callCompleteCatalogUploadV0(catalogId: string, uploadId: string, completeUploadRequestPayload: v0.catalog.upload.CompleteUploadRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} uploadId Unique identifier of the upload
         * @param {v0.catalog.upload.CompleteUploadRequest} completeUploadRequestPayload Request payload to complete an upload.
         */
        completeCatalogUploadV0(catalogId: string, uploadId: string, completeUploadRequestPayload: v0.catalog.upload.CompleteUploadRequest): Promise<void>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callListCatalogsForVendorV0(vendorId: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        listCatalogsForVendorV0(vendorId: string, nextToken?: string, maxResults?: number): Promise<v0.catalog.ListCatalogsResponse>;
        /**
         *
         * @param {v0.catalog.CreateCatalogRequest} createCatalogRequest Defines the request body for createCatalog API.
         */
        callCreateCatalogV0(createCatalogRequest: v0.catalog.CreateCatalogRequest): Promise<ApiResponse>;
        /**
         *
         * @param {v0.catalog.CreateCatalogRequest} createCatalogRequest Defines the request body for createCatalog API.
         */
        createCatalogV0(createCatalogRequest: v0.catalog.CreateCatalogRequest): Promise<v0.catalog.CatalogDetails>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callListSubscribersForDevelopmentEventsV0(vendorId: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        listSubscribersForDevelopmentEventsV0(vendorId: string, nextToken?: string, maxResults?: number): Promise<v0.developmentEvents.subscriber.ListSubscribersResponse>;
        /**
         *
         * @param {v0.developmentEvents.subscriber.CreateSubscriberRequest} createSubscriberRequest Defines the request body for createSubscriber API.
         */
        callCreateSubscriberForDevelopmentEventsV0(createSubscriberRequest: v0.developmentEvents.subscriber.CreateSubscriberRequest): Promise<ApiResponse>;
        /**
         *
         * @param {v0.developmentEvents.subscriber.CreateSubscriberRequest} createSubscriberRequest Defines the request body for createSubscriber API.
         */
        createSubscriberForDevelopmentEventsV0(createSubscriberRequest: v0.developmentEvents.subscriber.CreateSubscriberRequest): Promise<void>;
        /**
         *
         * @param {string} subscriberId Unique identifier of the subscriber.
         */
        callDeleteSubscriberForDevelopmentEventsV0(subscriberId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} subscriberId Unique identifier of the subscriber.
         */
        deleteSubscriberForDevelopmentEventsV0(subscriberId: string): Promise<void>;
        /**
         *
         * @param {string} subscriberId Unique identifier of the subscriber.
         */
        callGetSubscriberForDevelopmentEventsV0(subscriberId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} subscriberId Unique identifier of the subscriber.
         */
        getSubscriberForDevelopmentEventsV0(subscriberId: string): Promise<v0.developmentEvents.subscriber.SubscriberInfo>;
        /**
         *
         * @param {string} subscriberId Unique identifier of the subscriber.
         * @param {v0.developmentEvents.subscriber.UpdateSubscriberRequest} updateSubscriberRequest Defines the request body for updateSubscriber API.
         */
        callSetSubscriberForDevelopmentEventsV0(subscriberId: string, updateSubscriberRequest: v0.developmentEvents.subscriber.UpdateSubscriberRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} subscriberId Unique identifier of the subscriber.
         * @param {v0.developmentEvents.subscriber.UpdateSubscriberRequest} updateSubscriberRequest Defines the request body for updateSubscriber API.
         */
        setSubscriberForDevelopmentEventsV0(subscriberId: string, updateSubscriberRequest: v0.developmentEvents.subscriber.UpdateSubscriberRequest): Promise<void>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} subscriberId Unique identifier of the subscriber. If this query parameter is provided, the list would be filtered by the owning subscriberId.
         */
        callListSubscriptionsForDevelopmentEventsV0(vendorId: string, nextToken?: string, maxResults?: number, subscriberId?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} subscriberId Unique identifier of the subscriber. If this query parameter is provided, the list would be filtered by the owning subscriberId.
         */
        listSubscriptionsForDevelopmentEventsV0(vendorId: string, nextToken?: string, maxResults?: number, subscriberId?: string): Promise<v0.developmentEvents.subscription.ListSubscriptionsResponse>;
        /**
         *
         * @param {v0.developmentEvents.subscription.CreateSubscriptionRequest} createSubscriptionRequest Request body for createSubscription API.
         */
        callCreateSubscriptionForDevelopmentEventsV0(createSubscriptionRequest?: v0.developmentEvents.subscription.CreateSubscriptionRequest): Promise<ApiResponse>;
        /**
         *
         * @param {v0.developmentEvents.subscription.CreateSubscriptionRequest} createSubscriptionRequest Request body for createSubscription API.
         */
        createSubscriptionForDevelopmentEventsV0(createSubscriptionRequest?: v0.developmentEvents.subscription.CreateSubscriptionRequest): Promise<void>;
        /**
         *
         * @param {string} subscriptionId Unique identifier of the subscription.
         */
        callDeleteSubscriptionForDevelopmentEventsV0(subscriptionId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} subscriptionId Unique identifier of the subscription.
         */
        deleteSubscriptionForDevelopmentEventsV0(subscriptionId: string): Promise<void>;
        /**
         *
         * @param {string} subscriptionId Unique identifier of the subscription.
         */
        callGetSubscriptionForDevelopmentEventsV0(subscriptionId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} subscriptionId Unique identifier of the subscription.
         */
        getSubscriptionForDevelopmentEventsV0(subscriptionId: string): Promise<v0.developmentEvents.subscription.SubscriptionInfo>;
        /**
         *
         * @param {string} subscriptionId Unique identifier of the subscription.
         * @param {v0.developmentEvents.subscription.UpdateSubscriptionRequest} updateSubscriptionRequest Request body for updateSubscription API.
         */
        callSetSubscriptionForDevelopmentEventsV0(subscriptionId: string, updateSubscriptionRequest?: v0.developmentEvents.subscription.UpdateSubscriptionRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} subscriptionId Unique identifier of the subscription.
         * @param {v0.developmentEvents.subscription.UpdateSubscriptionRequest} updateSubscriptionRequest Request body for updateSubscription API.
         */
        setSubscriptionForDevelopmentEventsV0(subscriptionId: string, updateSubscriptionRequest?: v0.developmentEvents.subscription.UpdateSubscriptionRequest): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} catalogId Provides a unique identifier of the catalog
         */
        callAssociateCatalogWithSkillV0(skillId: string, catalogId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} catalogId Provides a unique identifier of the catalog
         */
        associateCatalogWithSkillV0(skillId: string, catalogId: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callListCatalogsForSkillV0(skillId: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        listCatalogsForSkillV0(skillId: string, nextToken?: string, maxResults?: number): Promise<v0.catalog.ListCatalogsResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v1.catalog.upload.CatalogUploadBase} catalogUploadRequestBody Provides the request body for create content upload
         */
        callCreateCatalogUploadV1(catalogId: string, catalogUploadRequestBody: v1.catalog.upload.CatalogUploadBase): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v1.catalog.upload.CatalogUploadBase} catalogUploadRequestBody Provides the request body for create content upload
         */
        createCatalogUploadV1(catalogId: string, catalogUploadRequestBody: v1.catalog.upload.CatalogUploadBase): Promise<void>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} uploadId Unique identifier of the upload
         */
        callGetContentUploadByIdV1(catalogId: string, uploadId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} uploadId Unique identifier of the upload
         */
        getContentUploadByIdV1(catalogId: string, uploadId: string): Promise<v1.catalog.upload.GetContentUploadResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v1.catalog.CreateContentUploadUrlRequest} generateCatalogUploadUrlRequestBody Request body to generate catalog upload url
         */
        callGenerateCatalogUploadUrlV1(catalogId: string, generateCatalogUploadUrlRequestBody: v1.catalog.CreateContentUploadUrlRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v1.catalog.CreateContentUploadUrlRequest} generateCatalogUploadUrlRequestBody Request body to generate catalog upload url
         */
        generateCatalogUploadUrlV1(catalogId: string, generateCatalogUploadUrlRequestBody: v1.catalog.CreateContentUploadUrlRequest): Promise<v1.catalog.CreateContentUploadUrlResponse>;
        /**
         *
         * @param {v1.auditLogs.AuditLogsRequest} getAuditLogsRequest Request object encompassing vendorId, optional request filters and optional pagination context.
         */
        callQueryDevelopmentAuditLogsV1(getAuditLogsRequest: v1.auditLogs.AuditLogsRequest): Promise<ApiResponse>;
        /**
         *
         * @param {v1.auditLogs.AuditLogsRequest} getAuditLogsRequest Request object encompassing vendorId, optional request filters and optional pagination context.
         */
        queryDevelopmentAuditLogsV1(getAuditLogsRequest: v1.auditLogs.AuditLogsRequest): Promise<v1.auditLogs.AuditLogsResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {Array<string>} productId The list of in-skill product IDs that you wish to get the summary for. A maximum of 50 in-skill product IDs can be specified in a single listInSkillProducts call. Please note that this parameter must not be used with &#39;nextToken&#39; and/or &#39;maxResults&#39; parameter.
         * @param {string} stage Filter in-skill products by specified stage.
         * @param {string} type Type of in-skill product to filter on.
         * @param {string} referenceName Filter in-skill products by reference name.
         * @param {string} status Status of in-skill product.
         * @param {string} isAssociatedWithSkill Filter in-skill products by whether or not they are associated to a skill.
         */
        callGetIspListForVendorV1(vendorId: string, nextToken?: string, maxResults?: number, productId?: Array<string>, stage?: string, type?: string, referenceName?: string, status?: string, isAssociatedWithSkill?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {Array<string>} productId The list of in-skill product IDs that you wish to get the summary for. A maximum of 50 in-skill product IDs can be specified in a single listInSkillProducts call. Please note that this parameter must not be used with &#39;nextToken&#39; and/or &#39;maxResults&#39; parameter.
         * @param {string} stage Filter in-skill products by specified stage.
         * @param {string} type Type of in-skill product to filter on.
         * @param {string} referenceName Filter in-skill products by reference name.
         * @param {string} status Status of in-skill product.
         * @param {string} isAssociatedWithSkill Filter in-skill products by whether or not they are associated to a skill.
         */
        getIspListForVendorV1(vendorId: string, nextToken?: string, maxResults?: number, productId?: Array<string>, stage?: string, type?: string, referenceName?: string, status?: string, isAssociatedWithSkill?: string): Promise<v1.isp.ListInSkillProductResponse>;
        /**
         *
         * @param {v1.isp.CreateInSkillProductRequest} createInSkillProductRequest defines the request body for createInSkillProduct API.
         */
        callCreateIspForVendorV1(createInSkillProductRequest: v1.isp.CreateInSkillProductRequest): Promise<ApiResponse>;
        /**
         *
         * @param {v1.isp.CreateInSkillProductRequest} createInSkillProductRequest defines the request body for createInSkillProduct API.
         */
        createIspForVendorV1(createInSkillProductRequest: v1.isp.CreateInSkillProductRequest): Promise<v1.isp.ProductResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} skillId The skill ID.
         */
        callDisassociateIspWithSkillV1(productId: string, skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} skillId The skill ID.
         */
        disassociateIspWithSkillV1(productId: string, skillId: string): Promise<void>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} skillId The skill ID.
         */
        callAssociateIspWithSkillV1(productId: string, skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} skillId The skill ID.
         */
        associateIspWithSkillV1(productId: string, skillId: string): Promise<void>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        callDeleteIspForProductV1(productId: string, stage: string, ifMatch?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        deleteIspForProductV1(productId: string, stage: string, ifMatch?: string): Promise<void>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         */
        callResetEntitlementForProductV1(productId: string, stage: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         */
        resetEntitlementForProductV1(productId: string, stage: string): Promise<void>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         */
        callGetIspDefinitionV1(productId: string, stage: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         */
        getIspDefinitionV1(productId: string, stage: string): Promise<v1.isp.InSkillProductDefinitionResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         * @param {v1.isp.UpdateInSkillProductRequest} updateInSkillProductRequest defines the request body for updateInSkillProduct API.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        callUpdateIspForProductV1(productId: string, stage: string, updateInSkillProductRequest: v1.isp.UpdateInSkillProductRequest, ifMatch?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         * @param {v1.isp.UpdateInSkillProductRequest} updateInSkillProductRequest defines the request body for updateInSkillProduct API.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        updateIspForProductV1(productId: string, stage: string, updateInSkillProductRequest: v1.isp.UpdateInSkillProductRequest, ifMatch?: string): Promise<void>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callGetIspAssociatedSkillsV1(productId: string, stage: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        getIspAssociatedSkillsV1(productId: string, stage: string, nextToken?: string, maxResults?: number): Promise<v1.isp.AssociatedSkillResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         */
        callGetIspSummaryV1(productId: string, stage: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} productId The in-skill product ID.
         * @param {string} stage Stage for skill.
         */
        getIspSummaryV1(productId: string, stage: string): Promise<v1.isp.InSkillProductSummaryResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         */
        callDeleteInteractionModelCatalogV1(catalogId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         */
        deleteInteractionModelCatalogV1(catalogId: string): Promise<void>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         */
        callGetInteractionModelCatalogDefinitionV1(catalogId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         */
        getInteractionModelCatalogDefinitionV1(catalogId: string): Promise<v1.skill.interactionModel.catalog.CatalogDefinitionOutput>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v1.skill.interactionModel.type.UpdateRequest} updateRequest
         */
        callUpdateInteractionModelCatalogV1(catalogId: string, updateRequest: v1.skill.interactionModel.type.UpdateRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v1.skill.interactionModel.type.UpdateRequest} updateRequest
         */
        updateInteractionModelCatalogV1(catalogId: string, updateRequest: v1.skill.interactionModel.type.UpdateRequest): Promise<void>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} updateRequestId The identifier for slotType version creation process
         */
        callGetInteractionModelCatalogUpdateStatusV1(catalogId: string, updateRequestId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} updateRequestId The identifier for slotType version creation process
         */
        getInteractionModelCatalogUpdateStatusV1(catalogId: string, updateRequestId: string): Promise<v1.skill.interactionModel.catalog.CatalogStatus>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v1.skill.interactionModel.version.VersionData} catalog
         */
        callCreateInteractionModelCatalogVersionV1(catalogId: string, catalog: v1.skill.interactionModel.version.VersionData): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {v1.skill.interactionModel.version.VersionData} catalog
         */
        createInteractionModelCatalogVersionV1(catalogId: string, catalog: v1.skill.interactionModel.version.VersionData): Promise<void>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} version Version for interaction model.
         */
        callDeleteInteractionModelCatalogVersionV1(catalogId: string, version: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} version Version for interaction model.
         */
        deleteInteractionModelCatalogVersionV1(catalogId: string, version: string): Promise<void>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} version Version for interaction model.
         */
        callGetInteractionModelCatalogVersionV1(catalogId: string, version: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} version Version for interaction model.
         */
        getInteractionModelCatalogVersionV1(catalogId: string, version: string): Promise<v1.skill.interactionModel.version.CatalogVersionData>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} version Version for interaction model.
         * @param {v1.skill.interactionModel.version.CatalogUpdate} catalogUpdate
         */
        callUpdateInteractionModelCatalogVersionV1(catalogId: string, version: string, catalogUpdate?: v1.skill.interactionModel.version.CatalogUpdate): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} version Version for interaction model.
         * @param {v1.skill.interactionModel.version.CatalogUpdate} catalogUpdate
         */
        updateInteractionModelCatalogVersionV1(catalogId: string, version: string, catalogUpdate?: v1.skill.interactionModel.version.CatalogUpdate): Promise<void>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} version Version for interaction model.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         */
        callGetInteractionModelCatalogValuesV1(catalogId: string, version: string, maxResults?: number, nextToken?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} catalogId Provides a unique identifier of the catalog
         * @param {string} version Version for interaction model.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         */
        getInteractionModelCatalogValuesV1(catalogId: string, version: string, maxResults?: number, nextToken?: string): Promise<v1.skill.interactionModel.version.CatalogValues>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         */
        callListInteractionModelCatalogsV1(vendorId: string, maxResults?: number, nextToken?: string, sortDirection?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         */
        listInteractionModelCatalogsV1(vendorId: string, maxResults?: number, nextToken?: string, sortDirection?: string): Promise<v1.skill.interactionModel.catalog.ListCatalogResponse>;
        /**
         *
         * @param {v1.skill.interactionModel.catalog.DefinitionData} catalog
         */
        callCreateInteractionModelCatalogV1(catalog: v1.skill.interactionModel.catalog.DefinitionData): Promise<ApiResponse>;
        /**
         *
         * @param {v1.skill.interactionModel.catalog.DefinitionData} catalog
         */
        createInteractionModelCatalogV1(catalog: v1.skill.interactionModel.catalog.DefinitionData): Promise<v1.skill.interactionModel.catalog.CatalogResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         */
        callListInteractionModelSlotTypesV1(vendorId: string, maxResults?: number, nextToken?: string, sortDirection?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         */
        listInteractionModelSlotTypesV1(vendorId: string, maxResults?: number, nextToken?: string, sortDirection?: string): Promise<v1.skill.interactionModel.type.ListSlotTypeResponse>;
        /**
         *
         * @param {v1.skill.interactionModel.type.DefinitionData} slotType
         */
        callCreateInteractionModelSlotTypeV1(slotType: v1.skill.interactionModel.type.DefinitionData): Promise<ApiResponse>;
        /**
         *
         * @param {v1.skill.interactionModel.type.DefinitionData} slotType
         */
        createInteractionModelSlotTypeV1(slotType: v1.skill.interactionModel.type.DefinitionData): Promise<v1.skill.interactionModel.type.SlotTypeResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         */
        callDeleteInteractionModelSlotTypeV1(slotTypeId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         */
        deleteInteractionModelSlotTypeV1(slotTypeId: string): Promise<void>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         */
        callGetInteractionModelSlotTypeDefinitionV1(slotTypeId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         */
        getInteractionModelSlotTypeDefinitionV1(slotTypeId: string): Promise<v1.skill.interactionModel.type.SlotTypeDefinitionOutput>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {v1.skill.interactionModel.type.UpdateRequest} updateRequest
         */
        callUpdateInteractionModelSlotTypeV1(slotTypeId: string, updateRequest: v1.skill.interactionModel.type.UpdateRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {v1.skill.interactionModel.type.UpdateRequest} updateRequest
         */
        updateInteractionModelSlotTypeV1(slotTypeId: string, updateRequest: v1.skill.interactionModel.type.UpdateRequest): Promise<void>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {string} updateRequestId The identifier for slotType version creation process
         */
        callGetInteractionModelSlotTypeBuildStatusV1(slotTypeId: string, updateRequestId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {string} updateRequestId The identifier for slotType version creation process
         */
        getInteractionModelSlotTypeBuildStatusV1(slotTypeId: string, updateRequestId: string): Promise<v1.skill.interactionModel.type.SlotTypeStatus>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         */
        callListInteractionModelSlotTypeVersionsV1(slotTypeId: string, maxResults?: number, nextToken?: string, sortDirection?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         */
        listInteractionModelSlotTypeVersionsV1(slotTypeId: string, maxResults?: number, nextToken?: string, sortDirection?: string): Promise<v1.skill.interactionModel.typeVersion.ListSlotTypeVersionResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {v1.skill.interactionModel.typeVersion.VersionData} slotType
         */
        callCreateInteractionModelSlotTypeVersionV1(slotTypeId: string, slotType: v1.skill.interactionModel.typeVersion.VersionData): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {v1.skill.interactionModel.typeVersion.VersionData} slotType
         */
        createInteractionModelSlotTypeVersionV1(slotTypeId: string, slotType: v1.skill.interactionModel.typeVersion.VersionData): Promise<void>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {string} version Version for interaction model.
         */
        callDeleteInteractionModelSlotTypeVersionV1(slotTypeId: string, version: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {string} version Version for interaction model.
         */
        deleteInteractionModelSlotTypeVersionV1(slotTypeId: string, version: string): Promise<void>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {string} version Version for interaction model.
         */
        callGetInteractionModelSlotTypeVersionV1(slotTypeId: string, version: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {string} version Version for interaction model.
         */
        getInteractionModelSlotTypeVersionV1(slotTypeId: string, version: string): Promise<v1.skill.interactionModel.typeVersion.SlotTypeVersionData>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {string} version Version for interaction model.
         * @param {v1.skill.interactionModel.typeVersion.SlotTypeUpdate} slotTypeUpdate
         */
        callUpdateInteractionModelSlotTypeVersionV1(slotTypeId: string, version: string, slotTypeUpdate: v1.skill.interactionModel.typeVersion.SlotTypeUpdate): Promise<ApiResponse>;
        /**
         *
         * @param {string} slotTypeId The identifier for a slot type.
         * @param {string} version Version for interaction model.
         * @param {v1.skill.interactionModel.typeVersion.SlotTypeUpdate} slotTypeUpdate
         */
        updateInteractionModelSlotTypeVersionV1(slotTypeId: string, version: string, slotTypeUpdate: v1.skill.interactionModel.typeVersion.SlotTypeUpdate): Promise<void>;
        /**
         *
         * @param {string} exportId The Export ID.
         */
        callGetStatusOfExportRequestV1(exportId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} exportId The Export ID.
         */
        getStatusOfExportRequestV1(exportId: string): Promise<v1.skill.ExportResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {Array<string>} skillId the list of skillIds that you wish to get the summary for. A maximum of 10 skillIds can be specified to get the skill summary in single listSkills call. Please note that this parameter must not be used with &#39;nextToken&#39; or/and &#39;maxResults&#39; parameter.
         */
        callListSkillsForVendorV1(vendorId: string, nextToken?: string, maxResults?: number, skillId?: Array<string>): Promise<ApiResponse>;
        /**
         *
         * @param {string} vendorId The vendor ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {Array<string>} skillId the list of skillIds that you wish to get the summary for. A maximum of 10 skillIds can be specified to get the skill summary in single listSkills call. Please note that this parameter must not be used with &#39;nextToken&#39; or/and &#39;maxResults&#39; parameter.
         */
        listSkillsForVendorV1(vendorId: string, nextToken?: string, maxResults?: number, skillId?: Array<string>): Promise<v1.skill.ListSkillResponse>;
        /**
         *
         * @param {string} importId The Import ID.
         */
        callGetImportStatusV1(importId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} importId The Import ID.
         */
        getImportStatusV1(importId: string): Promise<v1.skill.ImportResponse>;
        /**
         *
         * @param {v1.skill.CreateSkillWithPackageRequest} createSkillWithPackageRequest Defines the request body for createPackage API.
         */
        callCreateSkillPackageV1(createSkillWithPackageRequest: v1.skill.CreateSkillWithPackageRequest): Promise<ApiResponse>;
        /**
         *
         * @param {v1.skill.CreateSkillWithPackageRequest} createSkillWithPackageRequest Defines the request body for createPackage API.
         */
        createSkillPackageV1(createSkillWithPackageRequest: v1.skill.CreateSkillWithPackageRequest): Promise<void>;
        /**
         *
         * @param {v1.skill.CreateSkillRequest} createSkillRequest Defines the request body for createSkill API.
         */
        callCreateSkillForVendorV1(createSkillRequest: v1.skill.CreateSkillRequest): Promise<ApiResponse>;
        /**
         *
         * @param {v1.skill.CreateSkillRequest} createSkillRequest Defines the request body for createSkill API.
         */
        createSkillForVendorV1(createSkillRequest: v1.skill.CreateSkillRequest): Promise<v1.skill.CreateSkillResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        callGetAlexaHostedSkillMetadataV1(skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        getAlexaHostedSkillMetadataV1(skillId: string): Promise<v1.skill.AlexaHosted.HostedSkillMetadata>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsRequest} hostedSkillRepositoryCredentialsRequest defines the request body for hosted skill repository credentials
         */
        callGenerateCredentialsForAlexaHostedSkillV1(skillId: string, hostedSkillRepositoryCredentialsRequest: v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsRequest} hostedSkillRepositoryCredentialsRequest defines the request body for hosted skill repository credentials
         */
        generateCredentialsForAlexaHostedSkillV1(skillId: string, hostedSkillRepositoryCredentialsRequest: v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsRequest): Promise<v1.skill.AlexaHosted.HostedSkillRepositoryCredentialsList>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        callEndBetaTestV1(skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        endBetaTestV1(skillId: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        callGetBetaTestV1(skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        getBetaTestV1(skillId: string): Promise<v1.skill.betaTest.BetaTest>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.TestBody} createTestBody JSON object containing the details of a beta test used to create the test.
         */
        callCreateBetaTestV1(skillId: string, createTestBody?: v1.skill.betaTest.TestBody): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.TestBody} createTestBody JSON object containing the details of a beta test used to create the test.
         */
        createBetaTestV1(skillId: string, createTestBody?: v1.skill.betaTest.TestBody): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.TestBody} createTestBody JSON object containing the details of a beta test used to create the test.
         */
        callUpdateBetaTestV1(skillId: string, createTestBody?: v1.skill.betaTest.TestBody): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.TestBody} createTestBody JSON object containing the details of a beta test used to create the test.
         */
        updateBetaTestV1(skillId: string, createTestBody?: v1.skill.betaTest.TestBody): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        callStartBetaTestV1(skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        startBetaTestV1(skillId: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.testers.TestersList} testersRequest JSON object containing the email address of beta testers.
         */
        callAddTestersToBetaTestV1(skillId: string, testersRequest: v1.skill.betaTest.testers.TestersList): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.testers.TestersList} testersRequest JSON object containing the email address of beta testers.
         */
        addTestersToBetaTestV1(skillId: string, testersRequest: v1.skill.betaTest.testers.TestersList): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callGetListOfTestersV1(skillId: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        getListOfTestersV1(skillId: string, nextToken?: string, maxResults?: number): Promise<v1.skill.betaTest.testers.ListTestersResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.testers.TestersList} testersRequest JSON object containing the email address of beta testers.
         */
        callRemoveTestersFromBetaTestV1(skillId: string, testersRequest: v1.skill.betaTest.testers.TestersList): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.testers.TestersList} testersRequest JSON object containing the email address of beta testers.
         */
        removeTestersFromBetaTestV1(skillId: string, testersRequest: v1.skill.betaTest.testers.TestersList): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.testers.TestersList} testersRequest JSON object containing the email address of beta testers.
         */
        callRequestFeedbackFromTestersV1(skillId: string, testersRequest: v1.skill.betaTest.testers.TestersList): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.testers.TestersList} testersRequest JSON object containing the email address of beta testers.
         */
        requestFeedbackFromTestersV1(skillId: string, testersRequest: v1.skill.betaTest.testers.TestersList): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.testers.TestersList} testersRequest JSON object containing the email address of beta testers.
         */
        callSendReminderToTestersV1(skillId: string, testersRequest: v1.skill.betaTest.testers.TestersList): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.betaTest.testers.TestersList} testersRequest JSON object containing the email address of beta testers.
         */
        sendReminderToTestersV1(skillId: string, testersRequest: v1.skill.betaTest.testers.TestersList): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} certificationId Id of the certification. Reserved word identifier of mostRecent can be used to get the most recent certification for the skill. Note that the behavior of the API in this case would be the same as when the actual certification id of the most recent certification is used in the request.
         * @param {string} acceptLanguage User&#39;s locale/language in context.
         */
        callGetCertificationReviewV1(skillId: string, certificationId: string, acceptLanguage?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} certificationId Id of the certification. Reserved word identifier of mostRecent can be used to get the most recent certification for the skill. Note that the behavior of the API in this case would be the same as when the actual certification id of the most recent certification is used in the request.
         * @param {string} acceptLanguage User&#39;s locale/language in context.
         */
        getCertificationReviewV1(skillId: string, certificationId: string, acceptLanguage?: string): Promise<v1.skill.certification.CertificationResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callGetCertificationsListV1(skillId: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        getCertificationsListV1(skillId: string, nextToken?: string, maxResults?: number): Promise<v1.skill.certification.ListCertificationsResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        callGetSkillCredentialsV1(skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        getSkillCredentialsV1(skillId: string): Promise<v1.skill.SkillCredentials>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        callDeleteSkillV1(skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        deleteSkillV1(skillId: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         * @param {string} sortField Sets the field on which the sorting would be applied.
         * @param {Array<v1.StageType>} stage A filter used to retrieve items where the stage is equal to the given value.
         * @param {Array<v1.skill.history.LocaleInQuery>} locale
         * @param {Array<v1.skill.history.DialogActName>} dialogActName A filter used to retrieve items where the dialogAct name is equal to the given value. * &#x60;Dialog.ElicitSlot&#x60;: Alexa asked the user for the value of a specific slot. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#elicitslot) * &#x60;Dialog.ConfirmSlot&#x60;: Alexa confirmed the value of a specific slot before continuing with the dialog. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmslot) * &#x60;Dialog.ConfirmIntent&#x60;: Alexa confirmed the all the information the user has provided for the intent before the skill took action. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmintent)
         * @param {Array<v1.skill.history.IntentConfidenceBin>} intentConfidenceBin
         * @param {Array<string>} intentName A filter used to retrieve items where the intent name is equal to the given value.
         * @param {Array<string>} intentSlotsName A filter used to retrieve items where the one of the slot names is equal to the given value.
         * @param {Array<v1.skill.history.InteractionType>} interactionType
         * @param {Array<v1.skill.history.PublicationStatus>} publicationStatus
         * @param {Array<string>} utteranceText A filter used to retrieve items where the utterance text contains the given phrase. Each filter value can be at-least 1 character and at-most 100 characters long.
         */
        callGetUtteranceDataV1(skillId: string, nextToken?: string, maxResults?: number, sortDirection?: string, sortField?: string, stage?: Array<v1.StageType>, locale?: Array<v1.skill.history.LocaleInQuery>, dialogActName?: Array<v1.skill.history.DialogActName>, intentConfidenceBin?: Array<v1.skill.history.IntentConfidenceBin>, intentName?: Array<string>, intentSlotsName?: Array<string>, interactionType?: Array<v1.skill.history.InteractionType>, publicationStatus?: Array<v1.skill.history.PublicationStatus>, utteranceText?: Array<string>): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         * @param {string} sortField Sets the field on which the sorting would be applied.
         * @param {Array<v1.StageType>} stage A filter used to retrieve items where the stage is equal to the given value.
         * @param {Array<v1.skill.history.LocaleInQuery>} locale
         * @param {Array<v1.skill.history.DialogActName>} dialogActName A filter used to retrieve items where the dialogAct name is equal to the given value. * &#x60;Dialog.ElicitSlot&#x60;: Alexa asked the user for the value of a specific slot. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#elicitslot) * &#x60;Dialog.ConfirmSlot&#x60;: Alexa confirmed the value of a specific slot before continuing with the dialog. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmslot) * &#x60;Dialog.ConfirmIntent&#x60;: Alexa confirmed the all the information the user has provided for the intent before the skill took action. (https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html#confirmintent)
         * @param {Array<v1.skill.history.IntentConfidenceBin>} intentConfidenceBin
         * @param {Array<string>} intentName A filter used to retrieve items where the intent name is equal to the given value.
         * @param {Array<string>} intentSlotsName A filter used to retrieve items where the one of the slot names is equal to the given value.
         * @param {Array<v1.skill.history.InteractionType>} interactionType
         * @param {Array<v1.skill.history.PublicationStatus>} publicationStatus
         * @param {Array<string>} utteranceText A filter used to retrieve items where the utterance text contains the given phrase. Each filter value can be at-least 1 character and at-most 100 characters long.
         */
        getUtteranceDataV1(skillId: string, nextToken?: string, maxResults?: number, sortDirection?: string, sortField?: string, stage?: Array<v1.StageType>, locale?: Array<v1.skill.history.LocaleInQuery>, dialogActName?: Array<v1.skill.history.DialogActName>, intentConfidenceBin?: Array<v1.skill.history.IntentConfidenceBin>, intentName?: Array<string>, intentSlotsName?: Array<string>, interactionType?: Array<v1.skill.history.InteractionType>, publicationStatus?: Array<v1.skill.history.PublicationStatus>, utteranceText?: Array<string>): Promise<v1.skill.history.IntentRequests>;
        /**
         *
         * @param {v1.skill.UpdateSkillWithPackageRequest} updateSkillWithPackageRequest Defines the request body for updatePackage API.
         * @param {string} skillId The skill ID.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        callImportSkillPackageV1(updateSkillWithPackageRequest: v1.skill.UpdateSkillWithPackageRequest, skillId: string, ifMatch?: string): Promise<ApiResponse>;
        /**
         *
         * @param {v1.skill.UpdateSkillWithPackageRequest} updateSkillWithPackageRequest Defines the request body for updatePackage API.
         * @param {string} skillId The skill ID.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        importSkillPackageV1(updateSkillWithPackageRequest: v1.skill.UpdateSkillWithPackageRequest, skillId: string, ifMatch?: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} startTime The start time of query.
         * @param {string} endTime The end time of query (The maximum time duration is 1 week)
         * @param {string} period The aggregation period to use when retrieving the metric, follows ISO_8601#Durations format.
         * @param {string} metric A distinct set of logic which predictably returns a set of data.
         * @param {string} stage The stage of the skill (live, development).
         * @param {string} skillType The type of the skill (custom, smartHome and flashBriefing).
         * @param {string} intent The intent of the skill.
         * @param {string} locale The locale for the skill. e.g. en-GB, en-US, de-DE and etc.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         */
        callGetSkillMetricsV1(skillId: string, startTime: string, endTime: string, period: string, metric: string, stage: string, skillType: string, intent?: string, locale?: string, maxResults?: number, nextToken?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} startTime The start time of query.
         * @param {string} endTime The end time of query (The maximum time duration is 1 week)
         * @param {string} period The aggregation period to use when retrieving the metric, follows ISO_8601#Durations format.
         * @param {string} metric A distinct set of logic which predictably returns a set of data.
         * @param {string} stage The stage of the skill (live, development).
         * @param {string} skillType The type of the skill (custom, smartHome and flashBriefing).
         * @param {string} intent The intent of the skill.
         * @param {string} locale The locale for the skill. e.g. en-GB, en-US, de-DE and etc.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         */
        getSkillMetricsV1(skillId: string, startTime: string, endTime: string, period: string, metric: string, stage: string, skillType: string, intent?: string, locale?: string, maxResults?: number, nextToken?: string): Promise<v1.skill.metrics.GetMetricDataResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         * @param {string} accept Standard HTTP. Pass &#x60;application/json&#x60; or &#x60;test/csv&#x60; for GET calls.
         */
        callGetAnnotationsForNLUAnnotationSetsV1(skillId: string, annotationId: string, accept: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         * @param {string} accept Standard HTTP. Pass &#x60;application/json&#x60; or &#x60;test/csv&#x60; for GET calls.
         */
        getAnnotationsForNLUAnnotationSetsV1(skillId: string, annotationId: string, accept: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         * @param {string} contentType Standard HTTP. Pass &#x60;application/json&#x60; or &#x60;test/csv&#x60; for POST calls with a json/csv body.
         * @param {v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetAnnotationsRequest} updateNLUAnnotationSetAnnotationsRequest Payload sent to the update NLU annotation set API.
         */
        callUpdateAnnotationsForNLUAnnotationSetsV1(skillId: string, annotationId: string, contentType: string, updateNLUAnnotationSetAnnotationsRequest: v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetAnnotationsRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         * @param {string} contentType Standard HTTP. Pass &#x60;application/json&#x60; or &#x60;test/csv&#x60; for POST calls with a json/csv body.
         * @param {v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetAnnotationsRequest} updateNLUAnnotationSetAnnotationsRequest Payload sent to the update NLU annotation set API.
         */
        updateAnnotationsForNLUAnnotationSetsV1(skillId: string, annotationId: string, contentType: string, updateNLUAnnotationSetAnnotationsRequest: v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetAnnotationsRequest): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         */
        callDeletePropertiesForNLUAnnotationSetsV1(skillId: string, annotationId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         */
        deletePropertiesForNLUAnnotationSetsV1(skillId: string, annotationId: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         */
        callGetPropertiesForNLUAnnotationSetsV1(skillId: string, annotationId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         */
        getPropertiesForNLUAnnotationSetsV1(skillId: string, annotationId: string): Promise<v1.skill.nlu.annotationSets.GetNLUAnnotationSetPropertiesResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         * @param {v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetPropertiesRequest} updateNLUAnnotationSetPropertiesRequest Payload sent to the update NLU annotation set properties API.
         */
        callUpdatePropertiesForNLUAnnotationSetsV1(skillId: string, annotationId: string, updateNLUAnnotationSetPropertiesRequest: v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetPropertiesRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} annotationId Identifier of the NLU annotation set.
         * @param {v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetPropertiesRequest} updateNLUAnnotationSetPropertiesRequest Payload sent to the update NLU annotation set properties API.
         */
        updatePropertiesForNLUAnnotationSetsV1(skillId: string, annotationId: string, updateNLUAnnotationSetPropertiesRequest: v1.skill.nlu.annotationSets.UpdateNLUAnnotationSetPropertiesRequest): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} locale filter to NLU annotation set created using this locale
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. Defaults to 10. If more results are present, the response will contain a nextToken and a _link.next href.
         */
        callListNLUAnnotationSetsV1(skillId: string, locale?: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} locale filter to NLU annotation set created using this locale
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. Defaults to 10. If more results are present, the response will contain a nextToken and a _link.next href.
         */
        listNLUAnnotationSetsV1(skillId: string, locale?: string, nextToken?: string, maxResults?: number): Promise<v1.skill.nlu.annotationSets.ListNLUAnnotationSetsResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.nlu.annotationSets.CreateNLUAnnotationSetRequest} createNLUAnnotationSetRequest Payload sent to the create NLU annotation set API.
         */
        callCreateNLUAnnotationSetV1(skillId: string, createNLUAnnotationSetRequest: v1.skill.nlu.annotationSets.CreateNLUAnnotationSetRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.nlu.annotationSets.CreateNLUAnnotationSetRequest} createNLUAnnotationSetRequest Payload sent to the create NLU annotation set API.
         */
        createNLUAnnotationSetV1(skillId: string, createNLUAnnotationSetRequest: v1.skill.nlu.annotationSets.CreateNLUAnnotationSetRequest): Promise<v1.skill.nlu.annotationSets.CreateNLUAnnotationSetResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} evaluationId Identifier of the evaluation.
         */
        callGetNLUEvaluationV1(skillId: string, evaluationId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} evaluationId Identifier of the evaluation.
         */
        getNLUEvaluationV1(skillId: string, evaluationId: string): Promise<v1.skill.nlu.evaluations.GetNLUEvaluationResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} evaluationId Identifier of the evaluation.
         * @param {string} sortField
         * @param {string} testCaseStatus only returns test cases with this status
         * @param {string} actualIntentName only returns test cases with intents which resolve to this intent
         * @param {string} expectedIntentName only returns test cases with intents which are expected to be this intent
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. Defaults to 1000. If more results are present, the response will contain a nextToken and a _link.next href.
         */
        callGetResultForNLUEvaluationsV1(skillId: string, evaluationId: string, sortField?: string, testCaseStatus?: string, actualIntentName?: string, expectedIntentName?: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} evaluationId Identifier of the evaluation.
         * @param {string} sortField
         * @param {string} testCaseStatus only returns test cases with this status
         * @param {string} actualIntentName only returns test cases with intents which resolve to this intent
         * @param {string} expectedIntentName only returns test cases with intents which are expected to be this intent
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. Defaults to 1000. If more results are present, the response will contain a nextToken and a _link.next href.
         */
        getResultForNLUEvaluationsV1(skillId: string, evaluationId: string, sortField?: string, testCaseStatus?: string, actualIntentName?: string, expectedIntentName?: string, nextToken?: string, maxResults?: number): Promise<v1.skill.nlu.evaluations.GetNLUEvaluationResultsResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} locale filter to evaluations started using this locale
         * @param {string} stage filter to evaluations started using this stage
         * @param {string} annotationId filter to evaluations started using this annotationId
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. Defaults to 10. If more results are present, the response will contain a nextToken and a _link.next href.
         */
        callListNLUEvaluationsV1(skillId: string, locale?: string, stage?: string, annotationId?: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} locale filter to evaluations started using this locale
         * @param {string} stage filter to evaluations started using this stage
         * @param {string} annotationId filter to evaluations started using this annotationId
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. Defaults to 10. If more results are present, the response will contain a nextToken and a _link.next href.
         */
        listNLUEvaluationsV1(skillId: string, locale?: string, stage?: string, annotationId?: string, nextToken?: string, maxResults?: number): Promise<v1.skill.nlu.evaluations.ListNLUEvaluationsResponse>;
        /**
         *
         * @param {v1.skill.nlu.evaluations.EvaluateNLURequest} evaluateNLURequest Payload sent to the evaluate NLU API.
         * @param {string} skillId The skill ID.
         */
        callCreateNLUEvaluationsV1(evaluateNLURequest: v1.skill.nlu.evaluations.EvaluateNLURequest, skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {v1.skill.nlu.evaluations.EvaluateNLURequest} evaluateNLURequest Payload sent to the evaluate NLU API.
         * @param {string} skillId The skill ID.
         */
        createNLUEvaluationsV1(evaluateNLURequest: v1.skill.nlu.evaluations.EvaluateNLURequest, skillId: string): Promise<v1.skill.nlu.evaluations.EvaluateResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.simulations.SimulationsApiRequest} simulationsApiRequest Payload sent to the skill simulation API.
         */
        callSimulateSkillV1(skillId: string, simulationsApiRequest: v1.skill.simulations.SimulationsApiRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.simulations.SimulationsApiRequest} simulationsApiRequest Payload sent to the skill simulation API.
         */
        simulateSkillV1(skillId: string, simulationsApiRequest: v1.skill.simulations.SimulationsApiRequest): Promise<v1.skill.simulations.SimulationsApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} simulationId Id of the simulation.
         */
        callGetSkillSimulationV1(skillId: string, simulationId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} simulationId Id of the simulation.
         */
        getSkillSimulationV1(skillId: string, simulationId: string): Promise<v1.skill.simulations.SimulationsApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        callGetSSLCertificatesV1(skillId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         */
        getSSLCertificatesV1(skillId: string): Promise<v1.skill.SSLCertificatePayload>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.SSLCertificatePayload} sslCertificatePayload Defines the input/output of the ssl certificates api for a skill.
         */
        callSetSSLCertificatesV1(skillId: string, sslCertificatePayload: v1.skill.SSLCertificatePayload): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.SSLCertificatePayload} sslCertificatePayload Defines the input/output of the ssl certificates api for a skill.
         */
        setSSLCertificatesV1(skillId: string, sslCertificatePayload: v1.skill.SSLCertificatePayload): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        callDeleteSkillEnablementV1(skillId: string, stage: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        deleteSkillEnablementV1(skillId: string, stage: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        callGetSkillEnablementStatusV1(skillId: string, stage: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        getSkillEnablementStatusV1(skillId: string, stage: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        callSetSkillEnablementV1(skillId: string, stage: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        setSkillEnablementV1(skillId: string, stage: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        callCreateExportRequestForSkillV1(skillId: string, stage: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        createExportRequestForSkillV1(skillId: string, stage: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callGetIspListForSkillIdV1(skillId: string, stage: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        getIspListForSkillIdV1(skillId: string, stage: string, nextToken?: string, maxResults?: number): Promise<v1.isp.ListInSkillProductResponse>;
        /**
         *
         * @param {v1.skill.evaluations.ProfileNluRequest} profileNluRequest Payload sent to the profile nlu API.
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         */
        callProfileNluV1(profileNluRequest: v1.skill.evaluations.ProfileNluRequest, skillId: string, stage: string, locale: string): Promise<ApiResponse>;
        /**
         *
         * @param {v1.skill.evaluations.ProfileNluRequest} profileNluRequest Payload sent to the profile nlu API.
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         */
        profileNluV1(profileNluRequest: v1.skill.evaluations.ProfileNluRequest, skillId: string, stage: string, locale: string): Promise<v1.skill.evaluations.ProfileNluResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {string} stage Stage of the interaction model.
         * @param {string} version Version of interaction model. Use \&quot;~current\&quot; to get the model of the current version.
         */
        callGetConflictDetectionJobStatusForInteractionModelV1(skillId: string, locale: string, stage: string, version: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {string} stage Stage of the interaction model.
         * @param {string} version Version of interaction model. Use \&quot;~current\&quot; to get the model of the current version.
         */
        getConflictDetectionJobStatusForInteractionModelV1(skillId: string, locale: string, stage: string, version: string): Promise<v1.skill.interactionModel.conflictDetection.GetConflictDetectionJobStatusResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {string} stage Stage of the interaction model.
         * @param {string} version Version of interaction model. Use \&quot;~current\&quot; to get the model of the current version.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. Defaults to 100. If more results are present, the response will contain a nextToken and a _link.next href.
         */
        callGetConflictsForInteractionModelV1(skillId: string, locale: string, stage: string, version: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {string} stage Stage of the interaction model.
         * @param {string} version Version of interaction model. Use \&quot;~current\&quot; to get the model of the current version.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. Defaults to 100. If more results are present, the response will contain a nextToken and a _link.next href.
         */
        getConflictsForInteractionModelV1(skillId: string, locale: string, stage: string, version: string, nextToken?: string, maxResults?: number): Promise<v1.skill.interactionModel.conflictDetection.GetConflictsResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        callListPrivateDistributionAccountsV1(skillId: string, stage: string, nextToken?: string, maxResults?: number): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         */
        listPrivateDistributionAccountsV1(skillId: string, stage: string, nextToken?: string, maxResults?: number): Promise<v1.skill.Private.ListPrivateDistributionAccountsResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} id ARN that a skill can be privately distributed to.
         */
        callDeletePrivateDistributionAccountIdV1(skillId: string, stage: string, id: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} id ARN that a skill can be privately distributed to.
         */
        deletePrivateDistributionAccountIdV1(skillId: string, stage: string, id: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} id ARN that a skill can be privately distributed to.
         */
        callSetPrivateDistributionAccountIdV1(skillId: string, stage: string, id: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} id ARN that a skill can be privately distributed to.
         */
        setPrivateDistributionAccountIdV1(skillId: string, stage: string, id: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         */
        callDeleteAccountLinkingInfoV1(skillId: string, stageV2: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         */
        deleteAccountLinkingInfoV1(skillId: string, stageV2: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         */
        callGetAccountLinkingInfoV1(skillId: string, stageV2: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         */
        getAccountLinkingInfoV1(skillId: string, stageV2: string): Promise<v1.skill.accountLinking.AccountLinkingResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {v1.skill.accountLinking.AccountLinkingRequest} accountLinkingRequest The fields required to create accountLinking partner.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        callUpdateAccountLinkingInfoV1(skillId: string, stageV2: string, accountLinkingRequest: v1.skill.accountLinking.AccountLinkingRequest, ifMatch?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {v1.skill.accountLinking.AccountLinkingRequest} accountLinkingRequest The fields required to create accountLinking partner.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        updateAccountLinkingInfoV1(skillId: string, stageV2: string, accountLinkingRequest: v1.skill.accountLinking.AccountLinkingRequest, ifMatch?: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         */
        callGetInteractionModelV1(skillId: string, stageV2: string, locale: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         */
        getInteractionModelV1(skillId: string, stageV2: string, locale: string): Promise<v1.skill.interactionModel.InteractionModelData>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         */
        callGetInteractionModelMetadataV1(skillId: string, stageV2: string, locale: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         */
        getInteractionModelMetadataV1(skillId: string, stageV2: string, locale: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {v1.skill.interactionModel.InteractionModelData} interactionModel
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        callSetInteractionModelV1(skillId: string, stageV2: string, locale: string, interactionModel: v1.skill.interactionModel.InteractionModelData, ifMatch?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {v1.skill.interactionModel.InteractionModelData} interactionModel
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        setInteractionModelV1(skillId: string, stageV2: string, locale: string, interactionModel: v1.skill.interactionModel.InteractionModelData, ifMatch?: string): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         * @param {string} sortField Sets the field on which the sorting would be applied.
         */
        callListInteractionModelVersionsV1(skillId: string, stageV2: string, locale: string, nextToken?: string, maxResults?: number, sortDirection?: string, sortField?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {string} nextToken When response to this API call is truncated (that is, isTruncated response element value is true), the response also includes the nextToken element. The value of nextToken can be used in the next request as the continuation-token to list the next set of objects. The continuation token is an opaque value that Skill Management API understands. Token has expiry of 24 hours.
         * @param {number} maxResults Sets the maximum number of results returned in the response body. If you want to retrieve fewer than upper limit of 50 results, you can add this parameter to your request. maxResults should not exceed the upper limit. The response might contain fewer results than maxResults, but it will never contain more. If there are additional results that satisfy the search criteria, but these results were not returned, the response contains isTruncated &#x3D; true.
         * @param {string} sortDirection Sets the sorting direction of the result items. When set to &#39;asc&#39; these items are returned in ascending order of sortField value and when set to &#39;desc&#39; these items are returned in descending order of sortField value.
         * @param {string} sortField Sets the field on which the sorting would be applied.
         */
        listInteractionModelVersionsV1(skillId: string, stageV2: string, locale: string, nextToken?: string, maxResults?: number, sortDirection?: string, sortField?: string): Promise<v1.skill.interactionModel.version.ListResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {string} version Version for interaction model.
         */
        callGetInteractionModelVersionV1(skillId: string, stageV2: string, locale: string, version: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {string} locale The locale for the model requested e.g. en-GB, en-US, de-DE.
         * @param {string} version Version for interaction model.
         */
        getInteractionModelVersionV1(skillId: string, stageV2: string, locale: string, version: string): Promise<v1.skill.interactionModel.InteractionModelData>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         */
        callGetSkillManifestV1(skillId: string, stageV2: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         */
        getSkillManifestV1(skillId: string, stageV2: string): Promise<v1.skill.Manifest.SkillManifestEnvelope>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {v1.skill.Manifest.SkillManifestEnvelope} updateSkillRequest Defines the request body for updateSkill API.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        callUpdateSkillManifestV1(skillId: string, stageV2: string, updateSkillRequest: v1.skill.Manifest.SkillManifestEnvelope, ifMatch?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stageV2 Stages of a skill including the new certified stage. * &#x60;development&#x60; - skills which are currently in development corresponds to this stage. * &#x60;certified&#x60; -  skills which have completed certification and ready for publishing corresponds to this stage. * &#x60;live&#x60; - skills which are currently live corresponds to this stage.
         * @param {v1.skill.Manifest.SkillManifestEnvelope} updateSkillRequest Defines the request body for updateSkill API.
         * @param {string} ifMatch Request header that specified an entity tag. The server will update the resource only if the eTag matches with the resource&#39;s current eTag.
         */
        updateSkillManifestV1(skillId: string, stageV2: string, updateSkillRequest: v1.skill.Manifest.SkillManifestEnvelope, ifMatch?: string): Promise<void>;
        /**
         *
         * @param {v1.skill.validations.ValidationsApiRequest} validationsApiRequest Payload sent to the skill validation API.
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        callSubmitSkillValidationV1(validationsApiRequest: v1.skill.validations.ValidationsApiRequest, skillId: string, stage: string): Promise<ApiResponse>;
        /**
         *
         * @param {v1.skill.validations.ValidationsApiRequest} validationsApiRequest Payload sent to the skill validation API.
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         */
        submitSkillValidationV1(validationsApiRequest: v1.skill.validations.ValidationsApiRequest, skillId: string, stage: string): Promise<v1.skill.validations.ValidationsApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} validationId Id of the validation. Reserved word identifier of mostRecent can be used to get the most recent validation for the skill and stage. Note that the behavior of the API in this case would be the same as when the actual validation id of the most recent validation is used in the request.
         * @param {string} stage Stage for skill.
         * @param {string} acceptLanguage User&#39;s locale/language in context.
         */
        callGetSkillValidationsV1(skillId: string, validationId: string, stage: string, acceptLanguage?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} validationId Id of the validation. Reserved word identifier of mostRecent can be used to get the most recent validation for the skill and stage. Note that the behavior of the API in this case would be the same as when the actual validation id of the most recent validation is used in the request.
         * @param {string} stage Stage for skill.
         * @param {string} acceptLanguage User&#39;s locale/language in context.
         */
        getSkillValidationsV1(skillId: string, validationId: string, stage: string, acceptLanguage?: string): Promise<v1.skill.validations.ValidationsApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} resource Resource name for which status information is desired. It is an optional, filtering parameter and can be used more than once, to retrieve status for all the desired (sub)resources only, in single API call. If this parameter is not specified, status for all the resources/sub-resources will be returned.
         */
        callGetSkillStatusV1(skillId: string, resource?: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} resource Resource name for which status information is desired. It is an optional, filtering parameter and can be used more than once, to retrieve status for all the desired (sub)resources only, in single API call. If this parameter is not specified, status for all the resources/sub-resources will be returned.
         */
        getSkillStatusV1(skillId: string, resource?: string): Promise<v1.skill.SkillStatus>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.SubmitSkillForCertificationRequest} submitSkillForCertificationRequest Defines the request body for submitSkillForCertification API.
         */
        callSubmitSkillForCertificationV1(skillId: string, submitSkillForCertificationRequest?: v1.skill.SubmitSkillForCertificationRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.SubmitSkillForCertificationRequest} submitSkillForCertificationRequest Defines the request body for submitSkillForCertification API.
         */
        submitSkillForCertificationV1(skillId: string, submitSkillForCertificationRequest?: v1.skill.SubmitSkillForCertificationRequest): Promise<void>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.WithdrawRequest} withdrawRequest The reason and message (in case of OTHER) to withdraw a skill.
         */
        callWithdrawSkillFromCertificationV1(skillId: string, withdrawRequest: v1.skill.WithdrawRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {v1.skill.WithdrawRequest} withdrawRequest The reason and message (in case of OTHER) to withdraw a skill.
         */
        withdrawSkillFromCertificationV1(skillId: string, withdrawRequest: v1.skill.WithdrawRequest): Promise<void>;
        /**
         *
         */
        callCreateUploadUrlV1(): Promise<ApiResponse>;
        /**
         *
         */
        createUploadUrlV1(): Promise<v1.skill.UploadResponse>;
        /**
         *
         */
        callGetVendorListV1(): Promise<ApiResponse>;
        /**
         *
         */
        getVendorListV1(): Promise<v1.vendorManagement.Vendors>;
        /**
         *
         * @param {string} vendorId vendorId
         * @param {string} permission The permission of a hosted skill feature that customer needs to check.
         */
        callGetAlexaHostedSkillUserPermissionsV1(vendorId: string, permission: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} vendorId vendorId
         * @param {string} permission The permission of a hosted skill feature that customer needs to check.
         */
        getAlexaHostedSkillUserPermissionsV1(vendorId: string, permission: string): Promise<v1.skill.AlexaHosted.HostedSkillPermission>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {v2.skill.invocations.InvocationsApiRequest} invocationsApiRequest Payload sent to the skill invocation API.
         */
        callInvokeSkillEndPointV2(skillId: string, stage: string, invocationsApiRequest: v2.skill.invocations.InvocationsApiRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {v2.skill.invocations.InvocationsApiRequest} invocationsApiRequest Payload sent to the skill invocation API.
         */
        invokeSkillEndPointV2(skillId: string, stage: string, invocationsApiRequest: v2.skill.invocations.InvocationsApiRequest): Promise<v2.skill.invocations.InvocationsApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {v2.skill.simulations.SimulationsApiRequest} simulationsApiRequest Payload sent to the skill simulation API.
         */
        callSimulateSkillV2(skillId: string, stage: string, simulationsApiRequest: v2.skill.simulations.SimulationsApiRequest): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {v2.skill.simulations.SimulationsApiRequest} simulationsApiRequest Payload sent to the skill simulation API.
         */
        simulateSkillV2(skillId: string, stage: string, simulationsApiRequest: v2.skill.simulations.SimulationsApiRequest): Promise<v2.skill.simulations.SimulationsApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} simulationId Id of the simulation.
         */
        callGetSkillSimulationV2(skillId: string, stage: string, simulationId: string): Promise<ApiResponse>;
        /**
         *
         * @param {string} skillId The skill ID.
         * @param {string} stage Stage for skill.
         * @param {string} simulationId Id of the simulation.
         */
        getSkillSimulationV2(skillId: string, stage: string, simulationId: string): Promise<v2.skill.simulations.SimulationsApiResponse>;
    }
}
export declare namespace services {
    /**
     * Helper class that instantiates an ServiceClient implementation automatically resolving its
     * required ApiConfiguration.
     * @export
     * @class ServiceClientFactory
     */
    class ServiceClientFactory {
        protected apiConfiguration: ApiConfiguration;
        constructor(apiConfiguration: ApiConfiguration);
    }
}
